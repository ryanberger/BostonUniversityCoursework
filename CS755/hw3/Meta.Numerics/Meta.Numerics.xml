<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Meta.Numerics</name>
    </assembly>
    <members>
        <member name="T:Meta.Numerics.Statistics.FitResult">
            <summary>
            Represents the result of a fit procedure.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.FitResult.Parameters">
            <summary>
            Gets an array of the best fit parameter set.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.FitResult.Parameter(System.Int32)">
            <summary>
            Get an estimate of a fit parameter.
            </summary>
            <param name="n">The (zero-based) parameter number.</param>
            <returns>An estimate of the parameter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> is not within [0,<see cref="P:Meta.Numerics.Statistics.FitResult.Dimension"/>-1].</exception>
        </member>
        <member name="M:Meta.Numerics.Statistics.FitResult.Covariance(System.Int32,System.Int32)">
            <summary>
            Gets the covariance of two fit parameters.
            </summary>
            <param name="n">The (zero-based) number of the fist parameter.</param>
            <param name="m">The (zero-based) number of the second parameter.</param>
            <returns>The covariance of the two fit parameters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> or <paramref name="m"/> is not within [0,<see cref="P:Meta.Numerics.Statistics.FitResult.Dimension"/>-1].</exception>
        </member>
        <member name="M:Meta.Numerics.Statistics.FitResult.CorrelationCoefficient(System.Int32,System.Int32)">
            <summary>
            Gets the coefficient of correlation between two fit parameters.
            </summary>
            <param name="n">The (zero-based) number of the first parameter.</param>
            <param name="m">The (zero-based) number of the second parameter.</param>
            <returns>The correlation coefficient between the two parameters.</returns>
            <remarks><para>The correlation coefficient between two parameters is a re-scaling of their covariance to a number
            between -1 and 1 that indicates the strength of their correlation.</para>
            <para>The correlation coefficient is also called the Pearson R coefficient.</para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> or <paramref name="m"/> is not within [0,<see cref="P:Meta.Numerics.Statistics.FitResult.Dimension"/>-1].</exception>
        </member>
        <member name="M:Meta.Numerics.Statistics.FitResult.CovarianceMatrix">
            <summary>
            Gets the covariance matrix containing the variances and covariances for all fit parameters.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.FitResult.Dimension">
            <summary>
            Gets the number of fit parameters.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.FitResult.GoodnessOfFit">
            <summary>
            Gets a test of the quality of the fit.
            </summary>
            <remarks><para>If no goodness-of-fit test was performed as a part of the fit, this property will be null.</para></remarks>
        </member>
        <member name="T:Meta.Numerics.Statistics.UncertainValue">
            <summary>
            Represents a value with an associated uncertainty.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.ConfidenceInterval(System.Double)">
            <summary>
            Returns a confidence interval.
            </summary>
            <param name="P">The required confidence level.</param>
            <returns>The associated confidence interval.</returns>
            <remarks><para>This method assumes </para></remarks>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new uncertain value.
            </summary>
            <param name="value">The best estimate of the value.</param>
            <param name="uncertainty">The uncertainty in the value.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.ToString">
            <summary>
            Creates a string representation of the uncertain value.
            </summary>
            <returns>A string of the format <paramref name="value"/> &#x00B1; <paramref name="uncertainty"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Equality(Meta.Numerics.Statistics.UncertainValue,Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Determines whether two uncertain values are equal.
            </summary>
            <param name="v1">The first uncertain value.</param>
            <param name="v2">The second uncertain value.</param>
            <returns>True if the two uncertain values are equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Inequality(Meta.Numerics.Statistics.UncertainValue,Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Determines whether two uncertain values are not equal.
            </summary>
            <param name="v1">The first uncertain value.</param>
            <param name="v2">The second uncertain value.</param>
            <returns>True if the two uncertain values not are equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.Equals(System.Object)">
            <summary>
            Determines whether the given object represents the same uncertain value.
            </summary>
            <param name="obj">The object.</param>
            <returns>True if the object represents the same reference point, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.GetHashCode">
            <summary>
            Computes a hash code for the uncertain value.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_UnaryNegation(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Negates an uncertain value.
            </summary>
            <param name="x">The uncertain value.</param>
            <returns>The negative of the uncertain value.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Addition(Meta.Numerics.Statistics.UncertainValue,Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Adds two uncertain values.
            </summary>
            <param name="v1">The first uncertain value.</param>
            <param name="v2">The second uncertain value.</param>
            <returns>The sum of the two uncertain values.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Subtraction(Meta.Numerics.Statistics.UncertainValue,Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Subtracts two uncertain values.
            </summary>
            <param name="v1">The first uncertain value.</param>
            <param name="v2">The second uncertain value.</param>
            <returns>The difference of the two uncertain values.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Multiply(Meta.Numerics.Statistics.UncertainValue,Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Multiplies two uncertain values.
            </summary>
            <param name="v1">The first uncertain value.</param>
            <param name="v2">The second uncertain value.</param>
            <returns>The product of the two uncertain values.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Division(Meta.Numerics.Statistics.UncertainValue,Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Divides two uncertain values.
            </summary>
            <param name="v1">The first uncertain value.</param>
            <param name="v2">The second uncertain value.</param>
            <returns>The quotient of the two uncertain values.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Addition(System.Double,Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Adds an uncertain value to an certain value.
            </summary>
            <param name="v1">The certain value.</param>
            <param name="u2">The uncertain value.</param>
            <returns>The sum of the two values.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Addition(Meta.Numerics.Statistics.UncertainValue,System.Double)">
            <summary>
            Adds a certain value to an uncertain value.
            </summary>
            <param name="u1">The uncertain value.</param>
            <param name="v2">The certain value.</param>
            <returns></returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Subtraction(Meta.Numerics.Statistics.UncertainValue,System.Double)">
            <summary>
            Subtracts a certain value from an uncertain value.
            </summary>
            <param name="u1">The uncertain value.</param>
            <param name="v2">The certain value.</param>
            <returns>The difference between the two values.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Subtraction(System.Double,Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Subtracts an uncertain value from a certain value.
            </summary>
            <param name="v1">The certain value.</param>
            <param name="u2">The uncertain vlaue.</param>
            <returns>The difference between the two values.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Multiply(System.Double,Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Multiplies a certain value by an uncertain value.
            </summary>
            <param name="v1">The certain value.</param>
            <param name="u2">The uncertain value.</param>
            <returns>The product of the two values.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Multiply(Meta.Numerics.Statistics.UncertainValue,System.Double)">
            <summary>
            Multiplies an uncertain value by a certain value.
            </summary>
            <param name="u1">The uncertain value.</param>
            <param name="v2">The certain value.</param>
            <returns>The product of the two values.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainValue.op_Division(Meta.Numerics.Statistics.UncertainValue,System.Double)">
            <summary>
            Divides an uncertain value by a certain value.
            </summary>
            <param name="u1">The uncertain value.</param>
            <param name="v2">The certain value.</param>
            <returns>The quotient of the two values.</returns>
        </member>
        <member name="P:Meta.Numerics.Statistics.UncertainValue.Value">
            <summary>
            Gets the best estimate.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.UncertainValue.Uncertainty">
            <summary>
            Gets the uncertainty.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.UncertainValue.RelativeUncertainty">
            <summary>
            Gets the relative uncertainty.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Statistics.UncertainMath">
            <summary>
            Contains methods for computing basic mathematical functions of uncertain values.
            </summary>
            <remarks><para>The methods in this static class perform the same basic mathematical operations as the methods of
            the <see cref="T:System.Math"/> class, accounting for the uncertainty in the inputs to produce a corresponding
            uncertainty in the output.</para>
            <para>As with operations on uncertain values, the methods assume that the uncertainty in input parameters represents the
            standard deviation of a distribution of measurements, and produce a value for the uncertainty in the output which
            represent a corresponding standard deviation, under the assumption that the standard deviations are small relative to
            the best values.</para></remarks>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Sqrt(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the square root of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The square root of the argument.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Sin(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the sine of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The sine of the argument.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Cos(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the cosine of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The cosine of the argument.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Tan(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the tangent of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The tanget of the argument.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Asin(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the arcsine of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The arcsine of the argument.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Acos(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the arccosine of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The arccosine of the argument.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Atan(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the arctangent of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The arctanget of the argument.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Atan2(Meta.Numerics.Statistics.UncertainValue,Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the arctangent of the ratio of two uncertain values.
            </summary>
            <param name="x">The argument of the numerator.</param>
            <param name="y">The argument of the denominator.</param>
            <returns>The arctangent of the quotient.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Exp(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes e to the power of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The value of e^<sup>x1</sup>.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Log(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the natural logarithm of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The value of ln(x1).</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Pow(Meta.Numerics.Statistics.UncertainValue,System.Double)">
            <summary>
            Computes an uncertain value raised to an arbitrary power.
            </summary>
            <param name="x">The argument.</param>
            <param name="p">The power.</param>
            <returns>The argument raised to the specified power.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Sinh(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the hyperbolic sine of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The hyperbolic sine of the argument.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Cosh(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the hyperbolic cosine of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The hyperbolic cosine of the argument.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.UncertainMath.Tanh(Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Computes the hyperbolic tangent of an uncertain value.
            </summary>
            <param name="x">The argument.</param>
            <returns>The hyperbolic tanget of the argument.</returns>
        </member>
        <member name="T:Meta.Numerics.Statistics.ContingencyTable">
            <summary>
            Represents a contingency table.
            </summary>
            <remarks><para>Imagine a controlled experiment in which each data point consists of two categories. For example, a
            measurement of a driver's car and his nationality, or a person's sex and employment status. Such experiments are
            typically undertaken to determine what correlation exists between the categories.</para></remarks>
            <seealso cref="T:Meta.Numerics.Statistics.BinaryContingencyTable"/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ContingencyTable.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates a new contingency table.
            </summary>
            <param name="rows"></param>
            <param name="columns"></param>
        </member>
        <member name="M:Meta.Numerics.Statistics.ContingencyTable.#ctor(System.Int32[0:,0:])">
            <summary>
            Instantiates a new contingency table with the given data set.
            </summary>
            <param name="data">A (zero-based) matrix of contingency table entries.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.ContingencyTable.RowTotal(System.Int32)">
            <summary>
            Gets the total counts in a row.
            </summary>
            <param name="r">The row number.</param>
            <returns>The sum of counts in all entries in the row.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.ContingencyTable.ColumnTotal(System.Int32)">
            <summary>
            Gets the total counts in a column.
            </summary>
            <param name="c">The column number.</param>
            <returns>The sum of counts in all entries in the column.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.ContingencyTable.PearsonChiSquaredTest">
            <summary>
            Performs a Pearson χ<sup>2</sup> test for correlation in the table.
            </summary>
            <returns>The result of the test. The test statistic is χ<sup>2</sup> and its likelyhood under the null hypothesis is
            the (right) probability to obtain a value as large or larger.</returns>
            <remarks><para>The Pearson Pearson χ<sup>2</sup> test tests for correlation between the row and column values. If
            row and column values are uncorrelated, then the expected number of counts in a table entry is simply proportional to the
            totals for its row and column. If that number is large for all entries, then the central limit theorem suggests that the
            actual number of counts will be distributed normally with mean equal to the expected value and standard deviation equal
            to its square root. The χ<sup>2</sup> statistic measures the departure of the actual table from this expectation
            in the uncorrelated case, and under this null hypothesis its distribution is known. Having calculated χ<sup>2</sup>,
            then, we can compute just how unlikely it was to obtain a value as large or larger than the one obtained.</para>
            <para>In cases where either the actual or expected counts for some entries are small or zero, the assumptions of the
            Pearson χ<sup>2</sup> test are violated and it should not be used. For 2 X 2 experiments, the
            <see cref="M:Meta.Numerics.Statistics.BinaryContingencyTable.FisherExactTest"/> is a viable alternative in these cases.</para></remarks>
            <seealso cref="T:Meta.Numerics.Statistics.ChiSquaredDistribution"/>
        </member>
        <member name="P:Meta.Numerics.Statistics.ContingencyTable.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the count in the specified entry.
            </summary>
            <param name="r">The entry row number.</param>
            <param name="c">The entry column number.</param>
            <returns>The count in the specified entry.</returns>
        </member>
        <member name="P:Meta.Numerics.Statistics.ContingencyTable.RowCount">
            <summary>
            Gets the number of rows in the table.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.ContingencyTable.ColumnCount">
            <summary>
            Gets the number of columns in the table.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.ContingencyTable.Total">
            <summary>
            Gets the total counts in the table.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Statistics.BinaryContingencyTable">
            <summary>
            Represents a 2 X 2 contingency table.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.BinaryContingencyTable.#ctor">
            <summary>
            Initializes a new binary contingency table.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.BinaryContingencyTable.#ctor(System.Int32[0:,0:])">
            <summary>
            Initializes a new binary contingency table with the given entries.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Meta.Numerics.Statistics.BinaryContingencyTable.FisherExactTest">
            <summary>
            Performs a Fisher exact test.
            </summary>
            <returns>The results of the test. The test statistic is the summed probability of all tables exhibiting equal or stronger correlations,
            and its likelyhood under the null hypothesis is the (left) probability to obtain a smaller value. Note that, in this case, the test
            statistic itself is the likelyhood.</returns>
            <remarks><para>The Fisher exact test tests for correlations between row and column entries. It is a robust, non-parametric test,
            which, unlike the χ<sup>2</sup> test (see <see cref="M:Meta.Numerics.Statistics.ContingencyTable.PearsonChiSquaredTest"/>), can safely be used for tables
            with small, even zero-valued, entries.</para>
            <para>The Fisher test computes, under the null hypothesis of no correlation, the exact probability of all 2 X 2 tables with the
            same row and column totals as the given table. It then sums the probabilities of all tables that are as or less probable than
            the given table. In this way it determines the total probability of obtaining a 2 X 2 table which is at least as improbable
            as the given one.</para>
            <para>The test is two-sided, i.e. when considering less probable tables it does not distinguish between tables exhibiting
            the same and the opposite correlation as the given one.</para></remarks>
        </member>
        <member name="P:Meta.Numerics.Statistics.BinaryContingencyTable.OddsRatio">
            <summary>
            Computes the odds ratio of table.
            </summary>
            <remarks><para>For entries in the first row, the odds of landing in the first column are given by N[0,0] / N[0,1].
            For entries in the second row, the odds of landing in the first column are given by N[1,0] / N[1,1]. The odds
            ratio is the ratio of these two odds. An odds ratio significantly different from 1 indicates a correlation between
            row and column values.</para></remarks>
            <seealso cref="P:Meta.Numerics.Statistics.BinaryContingencyTable.LogOddsRatio"/>
        </member>
        <member name="P:Meta.Numerics.Statistics.BinaryContingencyTable.LogOddsRatio">
            <summary>
            Computes the log of the odds ratio.
            </summary>
            <seealso cref="P:Meta.Numerics.Statistics.BinaryContingencyTable.OddsRatio"/>
        </member>
        <member name="T:Meta.Numerics.Matrices.SquareMatrix">
            <summary>
            Represents a square matrix.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Matrices.ISquareMatrix">
            <summary>
            The contract fufilled by any real, square matrix.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Matrices.IMatrix">
            <summary>
            The contract fufilled by any real matrix.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Matrices.IMatrix.Clone">
            <summary>
            Returns a clone of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.IMatrix.Transpose">
            <summary>
            Returns a transpose of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meta.Numerics.Matrices.IMatrix.RowCount">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Matrices.IMatrix.ColumnCount">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Matrices.IMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets the value of a matrix entry.
            </summary>
            <param name="r">The (zero-based) row number.</param>
            <param name="c">The (zero-based) column number.</param>
            <returns>The value of the matrix entry.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ISquareMatrix.Trace">
            <summary>
            Computes the trace of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meta.Numerics.Matrices.ISquareMatrix.Dimension">
            <summary>
            Gets the dimension of the matrix.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.#ctor(System.Int32)">
            <summary>
            Initializes a new square matrix.
            </summary>
            <param name="dimension">The dimension of the matrix, which must be positive.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="dimension"/> &lt; 1.</exception>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.Row(System.Int32)">
            <summary>
            Returns a vector representing a given row of the matrix.
            </summary>
            <param name="r">The (zero-based) row number to return.</param>
            <returns></returns>
            <remarks>The returned vector is not linked to the matrix. If an entry in the matrix is updated after this method
            is called, the returned object will continue to represent a row of the original, not the updated, matrix. Similiarly,
            updates to the elements of the returned vector will not update the original matrix.</remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.Column(System.Int32)">
            <summary>
            Gets a copy of one column of the the matrix.
            </summary>
            <param name="c">The (zero-based) column number to return.</param>
            <returns></returns>
            <remarks>The returned vector is not linked to the matrix. If an entry in the matrix is updated after this method
            is called, the returned object will continue to represent a row of the original, not the updated, matrix. Similiarly,
            updates to the elements of the returned vector will not update the original matrix.</remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.Clone">
            <summary>
            Clones the matrix.
            </summary>
            <returns>An independent clone of the matrix.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.Transpose">
            <summary>
            Creates a transpose of the matrix.
            </summary>
            <returns>The matrix transpose M<sup>T</sup>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.Inverse">
            <summary>
            Computes the inverse of the matrix.
            </summary>
            <returns>The matrix inverse M<sup>-1</sup>.</returns>
            <remarks>
            <para>The inverse of a matrix is a matrix M<sup>-1</sup> such that M<sup>-1</sup>M = I, the identify matrix.</para>
            <para>The inversion of a matrix is an O(N<sup>3</sup>) operation.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.Trace">
            <summary>
            Computes the trace of the matrix.
            </summary>
            <returns>The trace of the matrix tr(M).</returns>
            <remarks><para>The trace of a matrix is the sum of its diagonal elements.</para></remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.LUDecomposition">
            <summary>
            Computes the LU decomposition of the matrix.
            </summary>
            <returns>The LU decomposition of the matrix.</returns>
            <remarks>
            <para>An LU decomposition of a matrix M is a set of matrices L, U, and P such that LU = PM, where L
            is lower-left triangular, U is upper-right triangular, and P is a permutation matrix (so that PM is
            a row-wise permutation of M).</para>
            <para>The LU decomposition of a square matrix is an O(N<sup>3</sup>) operation.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.Eigenvalues">
            <summary>
            Computes the eigenvalues of the matrix.
            </summary>
            <returns>The eigenvalues of the matrix.</returns>
            <seealso cref="M:Meta.Numerics.Matrices.SquareMatrix.Eigensystem"/>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.Eigensystem">
            <summary>
            Computes the eigenvalues and eigenvectors of the matrix.
            </summary>
            <returns>A representation of the eigenvalues and eigenvectors of the matrix.</returns>
            <remarks>
            <para>For a generic vector v and matrix M, Mv = u will point in some direction with no particular relationship to v.
            The eigenvectors of a matrix M are vectors z that satisfy Mz = λz, i.e. multiplying an eigenvector by a
            matrix reproduces the same vector, up to a prortionality constant λ called the eigenvalue.</para>
            <para>For v to be an eigenvector of M with eigenvalue λ, (M - λI)z = 0. But for a matrix to
            anihilate any non-zero vector, that matrix must have determinant, so det(M - λI)=0. For a matrix of
            order N, this is an equation for the roots of a polynomial of order N. Since an order-N polynomial always has exactly
            N roots, an order-N matrix always has exactly N eigenvalues.</para>
            <para>Since a polynomial with real coefficients can still have complex roots, a real square matrix can nonetheless
            have complex eigenvalues (and correspondly complex eigenvectors). However, again like the complex roots of a real
            polynomial, such eigenvalues will always occurs in complex-conjugate pairs.</para>
            <para>Although the eigenvalue polynomial ensures that an order-N matrix has N eigenvalues, it can occur that there
            are not N corresponding independent eigenvectors. A matrix with fewer eigenvectors than eigenvalues is called
            defective. Like singularity, defectiveness represents a delecate balance between the elements of a matrix that can
            typically be disturbed by just an infinitesimal perturbation of elements. Because of round-off-error, then, floating-point
            algorithms cannot reliably identify defective matrices. Instead, this method will return a full set of eigenvectors,
            but some eigenvectors, corresponding to very nearly equal eigenvalues, will be very nearly parallel.</para>
            <para>While a generic square matrix can be defective, many subspecies of square matrices are guaranteed not to be.
            This includes Markov matrices, orthogonal matrices, and symmetric matrices.</para>
            <para>Determining the eigenvalues and eigenvectors of a matrix is an O(N<sup>3</sup>) operation. If you need only the
            eigenvalues of a matrix, the <see cref="M:Meta.Numerics.Matrices.SquareMatrix.Eigenvalues"/> method is more efficient.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.op_Equality(Meta.Numerics.Matrices.SquareMatrix,Meta.Numerics.Matrices.SquareMatrix)">
            <summary>
            Determines whether two square matrices are equal.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>True if <paramref name="M1"/> and <paramref name="M2"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.op_Inequality(Meta.Numerics.Matrices.SquareMatrix,Meta.Numerics.Matrices.SquareMatrix)">
            <summary>
            Determines whether two square matrices are not equal.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>False if <paramref name="M1"/> and <paramref name="M2"/> are equal, otherwise true.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.Equals(System.Object)">
            <summary>
            Determines whether the given object is an equal matrix.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if <paramref name="obj"/> is an equal matrix, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.op_Addition(Meta.Numerics.Matrices.SquareMatrix,Meta.Numerics.Matrices.SquareMatrix)">
            <summary>
            Computes the sum of two square matrices.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>The sum <paramref name="M1"/> + <paramref name="M2"/>.</returns>
            <remarks>
            <para>Matrix addition is an O(N<sup>2</sup>) process.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.op_Subtraction(Meta.Numerics.Matrices.SquareMatrix,Meta.Numerics.Matrices.SquareMatrix)">
            <summary>
            Computes the difference of two square matrices.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>The difference <paramref name="M1"/> - <paramref name="M2"/>.</returns>
            <remarks>
            <para>Matrix subtraction is an O(N<sup>2</sup>) process.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.op_Multiply(Meta.Numerics.Matrices.SquareMatrix,Meta.Numerics.Matrices.SquareMatrix)">
            <summary>
            Computes the product of two square matrices.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>The product <paramref name="M1"/> * <paramref name="M2"/>.</returns>
            <remarks>
            <para>Note that matrix multiplication is not commutative, i.e. M1*M2 is generally not the same as M2*M1.</para>
            <para>Matrix multiplication is an O(N<sup>3</sup>) process.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.op_Multiply(System.Double,Meta.Numerics.Matrices.SquareMatrix)">
            <summary>
            Computes the product of a real number and a square matrix.
            </summary>
            <param name="x">The real number.</param>
            <param name="M">The matrix.</param>
            <returns>The product of <paramref name="x"/> and <paramref name="M"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareMatrix.op_Division(Meta.Numerics.Matrices.SquareMatrix,System.Double)">
            <summary>
            Computes the the quotient of a square matrix and a real number.
            </summary>
            <param name="M">The matrix.</param>
            <param name="x">The real number.</param>
            <returns>The quotient <paramref name="M"/>/<paramref name="x"/>.</returns>
        </member>
        <member name="P:Meta.Numerics.Matrices.SquareMatrix.Dimension">
            <summary>
            Gets the dimension of the matrix.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Matrices.SquareMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an entry of the matrix.
            </summary>
            <param name="r">The (zero-based) row number.</param>
            <param name="c">The (zero-based) column number.</param>
            <returns>The value of the specified matrix entry M<sub>r c</sub>.</returns>
        </member>
        <member name="T:Meta.Numerics.Matrices.SquareLUDecomposition">
            <summary>
            Represents the LU decomposition of a square matrix.
            </summary>
            <remarks><para>An LU decomposition is a representation of a matrix M as the product of a lower-left-triagular matrix L and
            and an upper-right-triangular matrix U. To avoid numerical instability, we allow ourselves to decompose a row-wise
            permutation of a matrix, so that we have P M = L U, where P is a permutation matrix.</para>
            <para>Given an LU decomposition of M, we can solve equations of the form M x = y in O(N<sup>2</sup>) time. We can also compute
            det M in O(N) time.</para></remarks>
            <seealso cref="T:Meta.Numerics.Matrices.SquareMatrix"/>
        </member>
        <member name="T:Meta.Numerics.Matrices.ISquareDecomposition">
            <summary>
            The contract fufilled by a real LU decomposition.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Matrices.ISquareDecomposition.Solve(System.Collections.Generic.IList{System.Double})">
            <summary>
            Computes the solution to a system of equations.
            </summary>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ISquareDecomposition.Inverse">
            <summary>
            Computes the inverse of the original matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ISquareDecomposition.Determinant">
            <summary>
            Computes the determinant of the original matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meta.Numerics.Matrices.ISquareDecomposition.Dimension">
            <summary>
            Gets the dimension of the system.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareLUDecomposition.Determinant">
            <summary>
            Computes the determinant of the original matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareLUDecomposition.Solve(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the solution vector that, when multiplied by the original matrix, produces the given left-hand side vector.
            </summary>
            <param name="rhs">The right-hand side vector.</param>
            <returns>The left-hand side vector.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rhs"/> is <c>null</c>.</exception>
            <exception cref="T:Meta.Numerics.DimensionMismatchException">The dimension of <paramref name="rhs"/> is not the same as the
            dimension of the matrix.</exception>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareLUDecomposition.Inverse">
            <summary>
            Returns the the inverse of the original matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareLUDecomposition.LMatrix">
            <summary>
            Gets the L factor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareLUDecomposition.UMatrix">
            <summary>
            Gets the U factor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SquareLUDecomposition.PMatrix">
            <summary>
            Gets the permutation matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meta.Numerics.Matrices.SquareLUDecomposition.Dimension">
            <summary>
            Gets the dimension of the system.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Matrices.ComplexEigensystem">
            <summary>
            Represents a collection of complex eigenvalues and eigenvectors.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Matrices.ComplexEigensystem.Eigenvalue(System.Int32)">
            <summary>
            Gets the specified eigenvalue.
            </summary>
            <param name="n">The number of the eigenvalue.</param>
            <returns>The <paramref name="n"/>th eigenvalue.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ComplexEigensystem.Eigenvector(System.Int32)">
            <summary>
            Gets the specified eigenvector.
            </summary>
            <param name="n">The number of the eigenvector.</param>
            <returns>The <paramref name="n"/>th eigenvector.</returns>
        </member>
        <member name="P:Meta.Numerics.Matrices.ComplexEigensystem.Dimension">
            <summary>
            Gets the dimension of the eigensystem.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Functions.FunctionMath">
            <summary>
            Contains methods for finding roots and extrema.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Functions.FunctionMath.FindZero(Meta.Numerics.Function{System.Double,System.Double},System.Double)">
            <summary>
            Isolates a root in the vicinity of a given point.
            </summary>
            <param name="f">The function whoose zero is sought.</param>
            <param name="x">A ordinate believed to be near the sought zero.</param>
            <returns>An ordinate at which the function has a zero.</returns>
        </member>
        <member name="M:Meta.Numerics.Functions.FunctionMath.FindZero(Meta.Numerics.Function{System.Double,System.Double},Meta.Numerics.Interval)">
            <summary>
            Isolates a root within a given interval.
            </summary>
            <param name="f">The function whoose zero is sought.</param>
            <param name="bracket">An interval bracketing the root.</param>
            <returns>An ordinate within the bracket at which the function has a zero.</returns>
            <exception cref="T:System.InvalidOperationException">The function does not change sign across the given interval.</exception>
        </member>
        <member name="M:Meta.Numerics.Functions.FunctionMath.FindMinimum(Meta.Numerics.Function{System.Double,System.Double},System.Double)">
            <summary>
            Minimizes a function in the vicinity of a given point.
            </summary>
            <param name="f">The function.</param>
            <param name="x">A point suspected to be near the minimum; the search begins at this point.</param>
            <returns>The minimum.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="f"/> is null.</exception>
            <remarks>
            <para>Since the search algorithm begins by evaluating <paramref name="f"/> near <paramref name="x"/>,
            it can fail if <paramref name="x"/> is near a singularity or other point at which the evaluation
            of <paramref name="f"/> could fail. If you can reliably bracket a minimum, the other
            overload of this method is safer and, if your bracket is any good, slightly faster.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Functions.FunctionMath.FindMinimum(Meta.Numerics.Function{System.Double,System.Double},Meta.Numerics.Interval)">
            <summary>
            Minimizes a function on a given interval.
            </summary>
            <param name="f">The function.</param>
            <param name="r">The interval.</param>
            <returns>The minimum.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="f"/> is null.</exception>
        </member>
        <member name="M:Meta.Numerics.Functions.FunctionMath.FindMinimum(Meta.Numerics.Function{System.Double[],System.Double},System.Double[])">
            <summary>
            Minimizes a function on a multi-dimensional space in the vicinity of a given point. 
            </summary>
            <param name="f">The function.</param>
            <param name="x">The starting point for the search.</param>
            <returns>The minimum.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="f"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="x"/> is null.</exception>
        </member>
        <member name="T:Meta.Numerics.Statistics.TestResult">
            <summary>
            Represents the result of a statistical test.
            </summary>
            <remarks>
            <para>A statistical test compares a data set to a model (or to another data set) and computes a single, real
            number, called the test statistic, which measures how much the data set differs from model (or the other data set).
            The key to a useful statistical test is that the distribution of the test statistic, under the assumption that
            the model actually explains the data (or that the other data set is drawn from the same distribution) is known.
            This assumption is called the null hypothesis.</para>
            </remarks>
        </member>
        <member name="P:Meta.Numerics.Statistics.TestResult.Statistic">
            <summary>
            Gets the value of the test statistic.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.TestResult.Distribution">
            <summary>
            Gets the distribution of the test statistic under the null hypothesis.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.TestResult.LeftProbability">
            <summary>
            Get the probability, under the null hypothesis, of obtaining a test statistic value as small or smaller than the one actually obtained. 
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.TestResult.RightProbability">
            <summary>
            Get the probability, under the null hypothesis, of obtaining a test statistic value as large as or larger than the one actually obtained. 
            </summary>
        </member>
        <member name="T:Meta.Numerics.NonconvergenceException">
            <summary>
            The exception that is thrown when an algorithm fails to converge.
            </summary>
        </member>
        <member name="M:Meta.Numerics.NonconvergenceException.#ctor">
            <summary>
            Initializes a new nonconvergence exception.
            </summary>
        </member>
        <member name="M:Meta.Numerics.NonconvergenceException.#ctor(System.String)">
            <summary>
            Inititalizes a new nonconvergence exception with the given exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Meta.Numerics.NonconvergenceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new nonconvergence exception with the given exception message and inner exception.
            </summary>
            <param name="message">The exeption message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Meta.Numerics.NonconvergenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initalizes a new nonconvergence exception with the given serialization information and streaming context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Meta.Numerics.DimensionMismatchException">
            <summary>
            The exception that is thrown when attempting an operation on objects with incompatible dimensions.
            </summary>
        </member>
        <member name="M:Meta.Numerics.DimensionMismatchException.#ctor">
            <summary>
            Initializes a new dimension mismatch exception.
            </summary>
        </member>
        <member name="M:Meta.Numerics.DimensionMismatchException.#ctor(System.String)">
            <summary>
            Inititalizes a new dimension mismatch exception with the given exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Meta.Numerics.DimensionMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new dimension mismatch exception with the given exception message and inner exception.
            </summary>
            <param name="message">The exeption message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Meta.Numerics.DimensionMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initalizes a new dimension mismatch exception with the given serialization information and streaming context.
            </summary>
            <param name="info">The serialization information.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Meta.Numerics.Matrices.ISymmetricMatrix">
            <summary>
            The contract fufilled by any real, symmetric matrix.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Functions.LineExtremum">
            <summary>
            Represents a maximum or minimum of a function of one variable.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Functions.LineExtremum.op_Implicit(Meta.Numerics.Functions.LineExtremum)~Meta.Numerics.Functions.SpaceExtremum">
            <summary>
            Converts a line extremum to a one-dimensional space extremum.
            </summary>
            <param name="m">The line extremum.</param>
            <returns>The corresponding one-dimensional space extremum.</returns>
        </member>
        <member name="P:Meta.Numerics.Functions.LineExtremum.Location">
            <summary>
            Gets the location (x-value) of the extremum.
            </summary>
            <remarks>
            <para>Note that numerical methods for finding typical a maximum or minimum cannot determine
            its location to full precision. Near a quadratic extremum, a change in x of ~ε will
            change f(x) by ~ε<sup>2</sup>. Thus the smallest detectable change in f(x) will
            typically correspond to a change in x of order of the square root of full precision. Full
            <see cref="T:System.Double"/> precision being ~16 digits, you should expect the location to
            be accurate only to ~8 digits.</para>
            </remarks>
        </member>
        <member name="P:Meta.Numerics.Functions.LineExtremum.Value">
            <summary>
            Gets the function value (y-value) at the extremum.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Functions.LineExtremum.Curvature">
            <summary>
            Gets the curvature at the extremum.
            </summary>
            <remarks>
            <para>The curvature is the second derivative of the function at the minimum.</para>
            <para>At a typical minimum, where the function has vanishing first derivative, the second derivative will be a positive number
            whose magnitude characterizes the "steepness" with which the function increases as one moves away from the minimum.</para>
            <para>At an atypical minimum, for example an interval boundary or a non-smooth function, this
            value may be meaningless.</para>
            <para>Even in the case of a typical minimum, the value of the curvature property will typically be accurate only
            to a handfull of digits. If you require a highly accurate determination of the curvature,
            you should compute the second derivative of the minimzed function explicitly.</para>
            </remarks>
        </member>
        <member name="T:Meta.Numerics.Functions.SpaceExtremum">
            <summary>
            Represents a maximum or minimum of a function on a multi-dimensional space.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Functions.SpaceExtremum.Location">
            <summary>
            Gets the location of the extremum.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Functions.SpaceExtremum.Curvature">
            <summary>
            Gets the curvature matrix at the extremum.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Functions.SpaceExtremum.Value">
            <summary>
            Gets the value of the function at the extremum.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Functions.SpaceExtremum.Dimension">
            <summary>
            Gets the dimension of the space on which the function is defined. 
            </summary>
        </member>
        <member name="T:Meta.Numerics.Function`2">
            <summary>
            Represents a function of one input parameter.
            </summary>
            <typeparam name="TIn">The type of the input parameter.</typeparam>
            <typeparam name="TOut">The type of the output value.</typeparam>
            <param name="x">The input parameter.</param>
            <returns>The output value.</returns>
        </member>
        <member name="T:Meta.Numerics.Function`3">
            <summary>
            Represents a function of two input parameters.
            </summary>
            <typeparam name="TIn1">The type of the first input aparameter.</typeparam>
            <typeparam name="TIn2">The type of the second input parameter.</typeparam>
            <typeparam name="TOut">The type of the output value.</typeparam>
            <param name="x1">The first input parameter.</param>
            <param name="x2">The second input parameter.</param>
            <returns>The output value.</returns>
        </member>
        <member name="T:Meta.Numerics.Functions.AdvancedMath">
            <summary>
            Contains methods that compute advanced functions with real arguments.
            </summary>
        </member>
        <member name="F:Meta.Numerics.Functions.AdvancedMath.EulerGamma">
            <summary>
            The Euler constant.
            </summary>
            <remarks><para>The Euler constant &#x3B3; = 0.5772...</para></remarks>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.BesselJ(System.Int32,System.Double)">
            <summary>
            Computes the regular Bessel function for integer orders.
            </summary>
            <param name="n">The order parameter.</param>
            <param name="x">The argument.</param>
            <returns>The value of J<sub><paramref name="n"/></sub>(<paramref name="x"/>).</returns>
            <remarks>
            <para>The Bessel functions of integral order occur in solutions to the wave equations with cylindrical symmetry. The
            regular Bessel functions are finite at the origin, and thus occur in situations where the wave equation is satisfied
            at the origin.</para></remarks>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.BesselY(System.Int32,System.Double)">
            <summary>
            Computes the irregular Bessel function for integer orders.
            </summary>
            <param name="n">The order parameter.</param>
            <param name="x">The argument.</param>
            <returns>The value of Y<sub>n</sub>(x).</returns>
            <remarks>
            <para>The Bessel functions of integral order occur in solutions to the wave equations with cylindrical symmetry. The
            irregular Bessel functions diverge at the origin, and thus occur in situations where the region in which the wave
            equation is satisfied not not include the origin.</para></remarks>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.BesselJ(System.Double,System.Double)">
            <summary>
            Computes the regular Bessel function for real orders.
            </summary>
            <param name="nu">The order parameter.</param>
            <param name="x">The argument.</param>
            <returns>The value of J<sub>&#x3BD;</sub>(x).</returns>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.BesselY(System.Double,System.Double)">
            <summary>
            Computes the irregual Bessel function for real orders.
            </summary>
            <param name="nu">The order parameter.</param>
            <param name="x">The argument.</param>
            <returns>The value of Y<sub>&#x3BD;</sub>(x).</returns>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.SphericalBesselJ(System.Int32,System.Double)">
            <summary>
            Computes the regular spherical Bessel function of integer order.
            </summary>
            <param name="n">The order parameter.</param>
            <param name="x">The argument.</param>
            <returns> The value of j<sub>n</sub>(x).</returns>
            <remarks>
            <para>The spherical Bessel functions occur in solutions to the wave equations with spherical symmetry. The
            regular sperhical Bessel functions are finite at the origin, and thus occur in situations where the wave equation is satisfied
            at the origin.</para>
            <para>The regular spherical Bessel functions are related to the regular Bessel functions of half-integer order by
            j<sub>n</sub>(x) = Sqrt(π/2x) J<sub>n+1/2</sub>(x).</para></remarks>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.BesselJ(System.Double,System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.SphericalBesselY(System.Int32,System.Double)">
            <summary>
            Computes the irregular spherical Bessel function of integer order.
            </summary>
            <param name="n">The order parameter.</param>
            <param name="x">The argument.</param>
            <returns>The value of y<sub>n</sub>(x).</returns>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.SphericalHarmonic(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Computes the value of a spherical harmonic function.
            </summary>
            <param name="l">The order, which must be non-negative.</param>
            <param name="m">The sub-order, which must lie between -l and l inclusive.</param>
            <param name="theta">The azimuthal angle &#x3B8;. This angle is usually expressed as between -&#x3C0;/2 and +&#x3C0;/2, with positive values representing the upper hemisphere and negative values representing the lower hemisphere.</param>
            <param name="phi">The cylindrical angle &#x3C6;. This angle is usually expressed as between 0 and 2&#x3C0;, measured counter-clockwise (as seen from above) from the positive x-axis. It is also possible to use negative values to represent clockwise movement. </param>
            <returns>The value of Y<sub>l,m</sub>(&#x3B8;,&#x3C6;).</returns>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.IntegralEi(System.Double)">
            <summary>
            Computes the principal value of the exponential integral.
            </summary>
            <param name="x">The argument, which must be non-negative.</param>
            <returns>The value of Ei(<paramref name="x"/>).</returns>
            <remarks>
            <para>The function Ei(x) appears in the evaluation of some indefinite integrals involving exponents and in
            number theory in the approximation li(x) = Ei(ln x) to the cumulative distribution of primes.</para>
            <para>It is related to the Cauchy principal value of the exponential integral via
            E<sub>1</sub>(-x ± iε) = -Ei(x) ∓ i#x3B5;. </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is negative.</exception>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.IntegralE(System.Int32,System.Double)">
            <summary>
            Computes the exponential integral.
            </summary>
            <param name="n">The order parameter, which must be non-negative.</param>
            <param name="x">The argument, which must be non-negative.</param>
            <returns>The value of Ei<sub><paramref name="n"/></sub>(<paramref name="x"/>).</returns>
            <remarks>
            <para>The exponential integral is defined as Ei<sub>n</sub>(x) = <sub>1</sub>∫<sup>∞</sup>dt e<sup>-xt</sup>/t<sup>n</sup>.</para>
            <para>It is related to the incomplete Gamma function for negative, integer shape parameters by Γ<sub>Q</sub>(-k, x) = Ei<sub>k+1</sub>(x) / x<sup>k</sup>.</para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is negative.</exception>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.IntegralCi(System.Double)">
            <summary>
            Computes the cosine integral.
            </summary>
            <param name="x">The argument, which must be non-negative.</param>
            <returns>The value of Ci(x).</returns>
            <remarks>
            <para>The cosine integral diverges logrithmically to negative inifity at the origin and executes a damped oscilation arround zero as its argument increases.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is negative.</exception>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.IntegralSi(System.Double)">
            <summary>
            Computes the sine integral.
            </summary>
            <param name="x">The argument.</param>
            <returns>The value of Si(x).</returns>
            <remarks>
            <para>The sine integral can be defined via Si(x) = <sub>0</sub>&#x222B;<sup>x</sup>dt sin(t)/t.</para>
            <para>The sine integral is zero at the origin and executes a damped oscilation arround &#x3C0;/2 as its argument increases.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.Erf(System.Double)">
            <summary>
            Computes the error function.
            </summary>
            <param name="x">The argument.</param>
            <returns>The value of erf(<paramref name="x"/>).</returns>
            <remarks>
            <para>The error can be defined via an integral as erf(x) = (2/√π) <sub>0</sub>∫<sup>x</sup>dt e<sup>-t<sup>2</sup></sup>.</para>
            <para>The area under a Bell curve (<see cref="T:Meta.Numerics.Statistics.NormalDistribution"/>) within ∓z  standard deviations of the mean is given by erf(z/√2).</para>
            <para>For large values of x, erf(x) ≈ 1 to within floating-point accuracy. To obtain accurate values of erfc(x) = 1 - erf(x)
            in this range, use the <see cref="M:Meta.Numerics.Functions.AdvancedMath.Erfc(System.Double)"/> function.</para></remarks>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.Erfc(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.Erfc(System.Double)">
            <summary>
            Computes the complementary error function.
            </summary>
            <param name="x">The argument.</param>
            <returns>The value of erfc(<paramref name="x"/>) = 1 - erf(<paramref name="x"/>).</returns>
            <remarks>
            <para>The complementary error function can be used to express the area in the tails of a Bell curve beyond a given distance from its center.</para>
            <para>It can be defined via an integral as erfc(x) = (2/√π) <sub>x</sub>∫<sup>∞</sup>dt e<sup>-t<sup>2</sup></sup>.</para>
            <para>For small values of x, erfc(x) ≈ 1 to within floating-point accuracy. To obtain accurate values of erfc(x) = 1 - erf(x)
            in this region, use the <see cref="M:Meta.Numerics.Functions.AdvancedMath.Erf(System.Double)"/> function.</para></remarks>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.Erf(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.InverseErf(System.Double)">
            <summary>
            Computes the inverse error function.
            </summary>
            <param name="y">The error function value erf(x), which must lie between -1 and 1.</param>
            <returns>The corresponding argument x.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="y"/> is outside [-1,1].</exception>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.Erf(System.Double)"/>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.Erfc(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.Dawson(System.Double)">
            <summary>
            Computes the Dawson integral.
            </summary>
            <param name="x">The argument.</param>
            <returns>The value of F(x).</returns>
            <remarks>
            <para>The Dawson integral F(x) = e<sup>-x<sup>2</sup></sup> <sub>0</sub>&#x222B;<sup>x</sup>dt e<sup>t<sup>2</sup></sup>.</para>
            <para>It is related to the error function for purely imaginary arguments.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.FresnelC(System.Double)">
            <summary>
            Computes the Fresnel cosine integral.
            </summary>
            <param name="x">The argument.</param>
            <returns>The value of C(x).</returns>
            <remarks>
            <para>The Fresnel cosine integral can be defined via C(x) = <sub>0</sub>∫<sup>x</sup>dt cos(π t<sup>2</sup>/2).</para>
            <para>It appears in wave optics in the calculation of diffraction patterns.</para>
            </remarks>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.FresnelS(System.Double)"/>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.Fresnel(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.FresnelS(System.Double)">
            <summary>
            Computes the Fresnel sine integral.
            </summary>
            <param name="x">The argument.</param>
            <returns>The value of S(x).</returns>
            <remarks>
            <para>The Fresnel sine integral can be defined via S(x) = <sub>0</sub>∫<sup>x</sup>dt sin(π t<sup>2</sup>/2).</para>
            <para>It appears in wave optics in the calculation of diffraction patterns.</para>
            </remarks>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.FresnelC(System.Double)"/>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.Fresnel(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.Fresnel(System.Double)">
            <summary>
            Computes the Fresnel cosine and sine integrals.
            </summary>
            <param name="x">The argument.</param>
            <returns>The value C(x) + i S(x).</returns>
            <remarks>
            <para>A plot of all values of this function in the complex plane as x ranges from
            negative infinity to positive infinity is called a Cornu spiral.</para>
            <para>The Fresnel function can be related to the complex error function along the line (1-I).</para>
            </remarks>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.FresnelS(System.Double)"/>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.FresnelC(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.RiemannZeta(System.Double)">
            <summary>
            Compute the Riemann zeta function.
            </summary>
            <param name="s">The argument.</param>
            <returns>The value &#x3B6;(s).</returns>
            <remarks>
            <para>The Riemann &#x3B6; function can be defined as the sum of the <paramref name="s"/>th inverse power of the natural numbers.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.DirichletEta(System.Double)">
            <summary>
            Computes the Dirichlet eta function.
            </summary>
            <param name="s">The argument, which must be non-negative.</param>
            <returns>The value of η(s).</returns>
            <remarks>
            <para>The Dirichlet eta function is the sum of the <paramref name="s"/>th inverse power of the natural numbers,
            with alternating signs. It can be related to the Riemann ζ function.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="s"/> is negative.</exception>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.RiemannZeta(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.LogGamma(System.Double)">
            <summary>
            Computes the natural logrithm of the Gamma function.
            </summary>
            <param name="x">The argument, which must be positive.</param>
            <returns>The log Gamma function ln(Γ(x)).</returns>
            <remarks>
            <para>Because the Gamma function grows rapidly for increasing real, positive arguments, it is often necessary to
            work with its logrithm in order to avoid overflow.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is negative.</exception>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.Gamma(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.Gamma(System.Double)">
            <summary>
            Computes the Gamma function.
            </summary>
            <param name="x">The argument.</param>
            <returns>The Gamma function Γ(x).</returns>
            <remarks>
            <para>The Gamma function is a generalization of the factorial (see <see cref="M:Meta.Numerics.Functions.AdvancedIntegerMath.Factorial(System.Int32)"/>) to arbitrary real values. If we define Γ(x) =
            <sub>0</sub>∫<sup>∞</sup>dt t<sup>x-1</sup> e<sup>-t</sup>, then for integer values Γ(n+1)=n!, but the
            the integral can also be evaluated for non-integer x.</para>
            <para>Because Γ(x) grows beyond the largest value that can be represented by a <see cref="T:System.Double"/> at quite
            moderate values of x, you may find it useful to work with the <see cref="M:Meta.Numerics.Functions.AdvancedMath.LogGamma(System.Double)"/> method, which returns ln(Γ(x)).</para>
            </remarks>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedIntegerMath.Factorial(System.Int32)"/>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.LogGamma(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.Psi(System.Double)">
            <summary>
            Computes the Psi function.
            </summary>
            <param name="x">The argument.</param>
            <returns>The value of ψ(x).</returns>
            <remarks>The Psi function is the derivative of the LogGamma function.</remarks>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.LogGamma(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.Beta(System.Double,System.Double)">
            <summary>
            Computes the Beta function.
            </summary>
            <param name="a">The first parameter.</param>
            <param name="b">The second parameter.</param>
            <returns>The beta function B(a,b).</returns>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.LeftGamma(System.Double,System.Double)">
            <summary>
            Computes the normalized lower (left) incomplete Gamma function.
            </summary>
            <param name="a">The shape parameter, which must be positive.</param>
            <param name="x">The argument, which must be non-negative.</param>
            <returns>The value of γ(a,x)/Γ(x).</returns>
            <remarks><para>The incomplete Gamma function is obtained by carrying out the Gamma function integration from zero to some
            finite value x, instead of to infinity. The function is normalized by dividing by the complete integral, so the
            function ranges from 0 to 1 as x ranges from 0 to infinity.</para>
            <para>For large values of x, this function becomes 1 within floating point precision. To determine its deviation from 1
            in this region, use the complementary function <see cref="M:Meta.Numerics.Functions.AdvancedMath.RightGamma(System.Double,System.Double)"/>.</para>
            <para>For a=ν/2 and x=χ<sup>2</sup>/2, this function is the CDF of the χ<sup>2</sup> distribution with ν degrees of freedom.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="a"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is negative.</exception>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.RightGamma(System.Double,System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.RightGamma(System.Double,System.Double)">
            <summary>
            Computes the normalized upper (right) incomplete Gamma function.
            </summary>
            <param name="a">The shape paraemter, which must be positive.</param>
            <param name="x">The argument, which must be non-negative.</param>
            <returns>The value of Γ(a,x)/Γ(x).</returns>
            <remarks>This function is the complement of the left incomplete Gamma function <see cref="M:Meta.Numerics.Functions.AdvancedMath.LeftGamma(System.Double,System.Double)"/>. </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="a"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="x"/> is negative.</exception>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.LeftGamma(System.Double,System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.Gamma(System.Double,System.Double)">
            <summary>
            Computes the incomplete Gamma function.
            </summary>
            <param name="a">The shape parameter, which must be positive.</param>
            <param name="x">The argument, which must be non-negative.</param>
            <returns>The value of Γ(a,x).</returns>
            <remarks><para>Like the Γ function itself, this function gets large very quickly. For most
            purposes, you will prefer to use the normalized incomplete gamma functions <see cref="M:Meta.Numerics.Functions.AdvancedMath.LeftGamma(System.Double,System.Double)"/> and
            <see cref="M:Meta.Numerics.Functions.AdvancedMath.RightGamma(System.Double,System.Double)"/>.</para></remarks>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedMath.Beta(System.Double,System.Double,System.Double)">
            <summary>
            Computes the incomplete Beta function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Meta.Numerics.Statistics.Sample">
            <summary>
            Represents a set of independent draws of real numbers.
            </summary>
            <remarks><para>This class </para></remarks>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.#ctor">
            <summary>
            Initializes a new, empty sample.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new sample from a list of values.
            </summary>
            <param name="values">Values to add to the sample.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null.</exception>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.Moment(System.Int32)">
            <summary>
            Computes the given sample moment.
            </summary>
            <param name="n">The order of the moment to compute.</param>
            <returns>The <paramref name="n"/>th moment of the sample.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.MomentAboutMean(System.Int32)">
            <summary>
            Computes the given sample moment about its mean.
            </summary>
            <param name="n">The order of the moment to compute.</param>
            <returns>The <paramref name="n"/>th moment about its mean of the sample.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.InverseLeftProbability(System.Double)">
            <summary>
            Gets the sample value corresponding to a given percentile score.
            </summary>
            <param name="P">The percentile, which must lie between zero and one.</param>
            <returns>The corresponding value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="P"/> lies outside [0,1].</exception>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.PopulationMoment(System.Int32)">
            <summary>
            Estimates the given population moment using the sample.
            </summary>
            <param name="n">The order of the moment.</param>
            <returns>An estimate of the <paramref name="n"/>th moment of the population.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.PopulationMomentAboutMean(System.Int32)">
            <summary>
            Estimates the given population moment about the mean using the sample.
            </summary>
            <param name="n">The order of the moment.</param>
            <returns></returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.FitToNormalDistribution">
            <summary>
            Fits the sample to a normal distribution.
            </summary>
            <returns>A <see cref="T:Meta.Numerics.Statistics.FitResult"/> containg the mu and sigma parameters of the normal distribution that best fits the sample data,
            and a Kolmogorov-Smirnov test of the quality of the fit.</returns>
            <seealso cref="T:Meta.Numerics.Statistics.NormalDistribution"/>
            <seealso cref="M:Meta.Numerics.Statistics.Sample.KolmogorovSmirnovTest(Meta.Numerics.Statistics.Distribution)"/>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.FitToExponentialDistribution">
            <summary>
            Fits the sample to an exponential distribution.
            </summary>
            <returns>A <see cref="T:Meta.Numerics.Statistics.FitResult"/> containing the lambda parameter of the exponential distribution that best fits the sample data,
            and a Kolmogorov-Smirnov test of the quality of the fit.</returns>
            <seealso cref="T:Meta.Numerics.Statistics.ExponentialDistribution"/>
            <seealso cref="M:Meta.Numerics.Statistics.Sample.KolmogorovSmirnovTest(Meta.Numerics.Statistics.Distribution)"/>
            <exception cref="T:System.InvalidOperationException">One or more values in the sample is negative.</exception>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.StudentTTest(System.Double)">
            <summary>
            Tests whether the sample mean is compatible with the reference mean.
            </summary>
            <param name="referenceMean">The reference mean.</param>
            <returns>The result of the test. The test statistic is a t-value. If t &gt; 0, the one-sided likelyhood
            to obtain a greater value under the null hypothesis is the (right) propability of that value. If t &lt; 0, the
            corresponding one-sided likelyhood is the (left) probability of that value. The two-sided likelyhood to obtain
            a t-value as far or farther from zero as the value obtained is just twice the one-sided likelyhood.</returns>
            <remarks><para>The test statistic of the student t-test is the difference between the
            sample and reference means, measured in units of the sample mean uncertainty. For normally
            distributed samples, this is known to follow a Student distribution. If t is
            far from zero, then the sample is unlikely to have been drawn from a population with the reference
            mean.</para>
            <para>Because the distribution of a t-statistic assumes a normally distributed population, this
            test should only be used on sample data compatible with a normal distribution. The Mann-Whitney
            U test is a less powerful non-parametric alternative that can be used to test mean compatibility
            on arbitrarly distributed data sets.</para></remarks>
            <seealso cref="T:Meta.Numerics.Statistics.StudentDistribution"/>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.StudentTTest(Meta.Numerics.Statistics.Sample)">
            <summary>
            Tests whether the sample mean is compatible with the mean of another sample.
            </summary>
            <param name="sample">The other sample.</param>
            <returns>The result of the test. The test statistic is a t-value. If t &gt; 0, the one-sided likelyhood
            to obtain a greater value under the null hypothesis is the (right) propability of that value. If t &lt; 0, the
            corresponding one-sided likelyhood is the (left) probability of that value. The two-sided likelyhood to obtain
            a t-value as far or farther from zero as the value obtained is just twice the one-sided likelyhood.</returns>
            <remarks><para></para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="sample"/> is null.</exception>
            <seealso cref="T:Meta.Numerics.Statistics.StudentDistribution"/>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.KolmogorovSmirnovTest(Meta.Numerics.Statistics.Distribution)">
            <summary>
            Tests whether the sample is compatible with the given distribution.
            </summary>
            <param name="distribution">The test distribution.</param>
            <returns>The test result. The test statistic is the D statistic and the likelyhood is the right probability
            to obtain a value of D as large or larger than the one obtained.</returns>
            <remarks><para>The Kolmogorov-Smirnov test measures the departure of a sample from a hypothesized population
            distribution by comparing the cumulative probability function of the data to the cumulative probability function
            of the hypothesized population distribution. The test statistic D is the maximum seperation between the two curves.</para>
            <para>Under the null hypothesis N<sup>1/2</sup>D is known to be distributed according to the Kolomogorov distribution
            in the large-N limit. Because of the large-N assumption, this test should not be used with small (less than ~50)
            data sets.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="distrubution"/> is null.</exception>
            <seealso cref="T:Meta.Numerics.Statistics.KolmogorovDistribution"/>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.KolmogorovSmirnovTest(Meta.Numerics.Statistics.Sample)">
            <summary>
            Tests whether the sample is compatible with another sample.
            </summary>
            <param name="sample">The other sample.</param>
            <returns>The test result. The test statistic is the D statistic and the likelyhood is the right probability
            to obtain a value of D as large or larger than the one obtained.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sample"/> is null.</exception>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.Add(System.Double)">
            <summary>
            Adds a value to the sample.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.Add(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Adds a series of values to the sample.
            </summary>
            <param name="values">An enumerator of values to be added.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null.</exception>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.Clear">
            <summary>
            Remove all values from the sample.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.Contains(System.Double)">
            <summary>
            Determines whether the sample contains a given value.
            </summary>
            <param name="value">The value to check for.</param>
            <returns>Whether the sample contains <paramref name="datum"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.Sample.Remove(System.Double)">
            <summary>
            Removes a given value from the sample.
            </summary>
            <param name="value">The value to remove.</param>
            <returns>Whether the value was found and removed.</returns>
        </member>
        <member name="P:Meta.Numerics.Statistics.Sample.Count">
            <summary>
            Gets the number of measurements in the sample.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.Sample.Mean">
            <summary>
            Gets the sample mean.
            </summary>
            <remarks>
            <para>The mean is the average of all values in the sample.</para>
            </remarks>
            <seealso cref="P:Meta.Numerics.Statistics.Sample.PopulationMean"/>
        </member>
        <member name="P:Meta.Numerics.Statistics.Sample.Variance">
            <summary>
            Gets the sample variance.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.Sample.StandardDeviation">
            <summary>
            Gets the sample standard deviation.
            </summary>
            <seealso cref="P:Meta.Numerics.Statistics.Sample.PopulationStandardDeviation"/>
        </member>
        <member name="P:Meta.Numerics.Statistics.Sample.Median">
            <summary>
            Gets the sample median.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.Sample.InterquartileRange">
            <summary>
            Gets the interquartile range of sample measurmements.
            </summary>
            <remarks>The interquartile range is the interval between the 25th and the 75th percentile.</remarks>
            <seealso cref="M:Meta.Numerics.Statistics.Sample.InverseLeftProbability(System.Double)"/>
        </member>
        <member name="P:Meta.Numerics.Statistics.Sample.PopulationMean">
            <summary>
            Gets an estimate of the population mean from the sample.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.Sample.PopulationVariance">
            <summary>
            Gets an estimate of the population variance from the sample.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.Sample.PopulationStandardDeviation">
            <summary>
            Gets an estimate of the population standard deviation from the sample.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Matrices.Matrix">
            <summary>
            Represents a rectangular matrix of real numbers.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a rectangular matrix with the given dimensions.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="rows"/> or <paramref name="columns"/>
            is less than one.</exception>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a rectangular matrix from the given CLR matrix.
            </summary>
            <param name="matrix">A CLR matrix of initialization values.</param>
            <remarks><para>The matrix created is independent of the CLR matrix used to initialize it.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="matrix"/> is null</exception>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.Row(System.Int32)">
            <summary>
            Gets a copy of a matrix row.
            </summary>
            <param name="r">The (zero-based) row number.</param>
            <returns>The <paramref name="r"/>th row of the matrix.</returns>
            <remarks><para>The returned row vector is independent of the matrix; changing its values
            will not change the entries of the original matrix.</para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified row does not exist.</exception>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.Column(System.Int32)">
            <summary>
            Gets a copy of a matrix column.
            </summary>
            <param name="c">The (zero-based) column number.</param>
            <returns>The <paramref name="c"/>th column of the matrix.</returns>
            <remarks><para>The returned column vector is independent of the matrix; changing its values
            will not change the entries of the original matrix.</para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified column does not exist.</exception>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.Clone">
            <summary>
            Creates a clone of the matrix.
            </summary>
            <returns>A clone of the matrix.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.Transpose">
            <summary>
            Generates the transpose of the matrix.
            </summary>
            <returns>The matrix M<sup>T</sup>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.op_Equality(Meta.Numerics.Matrices.Matrix,Meta.Numerics.Matrices.Matrix)">
            <summary>
            Determines whether two matrices are equal.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>True if <paramref name="M1"/> and <paramref name="M2"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.op_Inequality(Meta.Numerics.Matrices.Matrix,Meta.Numerics.Matrices.Matrix)">
            <summary>
            Determines whether two matrices are not equal.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>False if <paramref name="M1"/> and <paramref name="M2"/> are equal, otherwise true.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the given object is an equal matrix.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if <paramref name="obj"/> is an equal matrix, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.op_Addition(Meta.Numerics.Matrices.Matrix,Meta.Numerics.Matrices.Matrix)">
            <summary>
            Computes the sum of two matrices.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>The sum <paramref name="M1"/> + <paramref name="M2"/>.</returns>
            <remarks>
            <para>Matrix addition is an O(N<sup>2</sup>) process.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.op_Subtraction(Meta.Numerics.Matrices.Matrix,Meta.Numerics.Matrices.Matrix)">
            <summary>
            Computes the difference of two matrices.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>The difference <paramref name="M1"/> - <paramref name="M2"/>.</returns>
            <remarks>
            <para>Matrix subtraction is an O(N<sup>2</sup>) process.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.op_Multiply(Meta.Numerics.Matrices.Matrix,Meta.Numerics.Matrices.Matrix)">
            <summary>
            Computes the product of two matrices.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>The product <paramref name="M1"/> * <paramref name="M2"/>.</returns>
            <remarks>
            <para>Note that matrix multiplication is not commutative, i.e. M1*M2 is generally not the same as M2*M1.</para>
            <para>Matrix multiplication is an O(N<sup>3</sup>) process.</para>
            </remarks>        
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.op_Multiply(System.Double,Meta.Numerics.Matrices.Matrix)">
            <summary>
            Computes the product of a real number and a matrix.
            </summary>
            <param name="x">The real number.</param>
            <param name="M">The matrix.</param>
            <returns>The product of <paramref name="x"/> <paramref name="M"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.Matrix.op_Division(Meta.Numerics.Matrices.Matrix,System.Double)">
            <summary>
            Computes the the quotient of a matrix and a real number.
            </summary>
            <param name="M">The matrix.</param>
            <param name="x">The real number.</param>
            <returns>The quotient <paramref name="M"/>/<paramref name="x"/>.</returns>
        </member>
        <member name="P:Meta.Numerics.Matrices.Matrix.RowCount">
            <summary>
            Gets the number of matrix rows.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Matrices.Matrix.ColumnCount">
            <summary>
            Gets the number of matrix columns.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Matrices.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value of a matrix entry.
            </summary>
            <param name="r">The (zero-based) row index.</param>
            <param name="c">The (zero-based) column index.</param>
            <returns>The value of the <paramref name="r"/>,<paramref name="c"/> matrix entry.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="r"/> or <paramref name="c"/> is
            outside the valid range.</exception>
        </member>
        <member name="T:Meta.Numerics.Interval">
            <summary>
            Represents an interval on the real number line.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Interval.OpenContains(System.Double)">
            <summary>
            Determines whether the argument lies in the open interval.
            </summary>
            <param name="x">The argument.</param>
            <returns>True if <paramref name="x"/> lies in (a,b), otherwise False.</returns>
        </member>
        <member name="M:Meta.Numerics.Interval.ClosedContains(System.Double)">
            <summary>
            Determines whether the argument lies in the closed interval.
            </summary>
            <param name="x">The argument.</param>
            <returns>True if <paramref name="x"/> lies in [a,b], otherwise False.</returns>
        </member>
        <member name="M:Meta.Numerics.Interval.FromEndpoints(System.Double,System.Double)">
            <summary>
            Creates a new interval, given its endpoints.
            </summary>
            <param name="a">The left (lower) endpoint of the interval.</param>
            <param name="b">The right (upper) endpoint of the interval.</param>
            <returns>The specified interval.</returns>
            <remarks>If width of the interval is very much smaller than its endpoint values, accuracy will be better maintained by constructing the interval using one endpoint and its width.</remarks>
        </member>
        <member name="M:Meta.Numerics.Interval.FromEndpointAndWidth(System.Double,System.Double)">
            <summary>
            Creates a new interval, given its lower endpoint and width.
            </summary>
            <param name="endpoint">The left (lower) endpoint of the interval.</param>
            <param name="width">The width of the interval.</param>
            <returns>The specified interval.</returns>
        </member>
        <member name="M:Meta.Numerics.Interval.FromMidpointAndWidth(System.Double,System.Double)">
            <summary>
            Creates a new interval, given its midpoint and width.
            </summary>
            <param name="midpoint">The midpoint of the interval.</param>
            <param name="width">The width of the interval.</param>
            <returns>The specified interval.</returns>
        </member>
        <member name="M:Meta.Numerics.Interval.op_Equality(Meta.Numerics.Interval,Meta.Numerics.Interval)">
            <summary>
            Determines whether two intervals are equal.
            </summary>
            <param name="i1">The first interval.</param>
            <param name="i2">The second interval.</param>
            <returns>True if <paramref name="i1"/> and <paramref name="i2"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Interval.op_Inequality(Meta.Numerics.Interval,Meta.Numerics.Interval)">
            <summary>
            Determines whether two intervals are not equal.
            </summary>
            <param name="i1">The first interval.</param>
            <param name="i2">The second interval.</param>
            <returns>True if <paramref name="i1"/> and <paramref name="i2"/> are not equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Interval.Equals(System.Object)">
            <summary>
            Determines whether a given object is an equal interval.
            </summary>
            <param name="obj">An object.</param>
            <returns>True if <paramref name="obj"/> is an equal <see cref="T:Meta.Numerics.Interval"/>, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Interval.GetHashCode">
            <usebase />
        </member>
        <member name="P:Meta.Numerics.Interval.LeftEndpoint">
            <summary>
            Gets the left (lower) endpoint of the interval.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Interval.RightEndpoint">
            <summary>
            Gets the right (upper) endpoint of the interval.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Interval.Width">
            <summary>
            Gets the width of the interval.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Interval.Midpoint">
            <summary>
            Gets the mid-point of the interval.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Functions.OrthogonalPolynomials">
            <summary>
            Contains methods that compute the values of orthogonal polynomials.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Functions.OrthogonalPolynomials.HermiteH(System.Int32,System.Double)">
            <summary>
            Computes the value of a (physicists') Hermite polynomial.
            </summary>
            <param name="n">The order, which must be non-negative.</param>
            <param name="x">The argument.</param>
            <returns>The value H<sub>n</sub>(x).</returns>
            <remarks>
            <para>Hermite polynomials are orthogonal on the interval (-∞,+∞) with the
            weight e<sup>-x<sup>2</sup></sup>.</para>
            <para>They appear in the solution of the one-dimensional, quantum mehanical, harmoic oscilator.</para>
            <para>Statisticans' Hermite polynomials (see <see cref="M:Meta.Numerics.Functions.OrthogonalPolynomials.HermiteHe(System.Int32,System.Double)"/>) are related to physicists' Hermite
            polynomials via H<sub>n</sub>(x) = 2<sup>n</sup>H<sub>n</sub>(x √2). Staticians' Hermite polynomials
            do not grow as quickly as physicists', and may therefore be preferable for large values of <paramref name="n"/>
            and <paramref name="x"/> which could overflow <see cref="T:System.Double"/>.</para>
            </remarks>
            <seealso cref="M:Meta.Numerics.Functions.OrthogonalPolynomials.HermiteHe(System.Int32,System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.OrthogonalPolynomials.HermiteHe(System.Int32,System.Double)">
            <summary>
            Computes the value of a (statisticians') Hermite polynomial.
            </summary>
            <param name="n">The order, which must be non-negative.</param>
            <param name="x">The argument.</param>
            <returns>The value He<sub>n</sub>(x).</returns>
            <remarks>
            <para>Hermite polynomials are orthogonal on the interval (-∞,+∞) with the
            weight e<sup>-x<sup>2</sup>/2</sup>.</para>
            <para>Their orthonormality relation makes them a useful basis for expressing pertubations
            arround a normal distribution.</para>
            <para>Physicists' Hermite polynomials (see <see cref="M:Meta.Numerics.Functions.OrthogonalPolynomials.HermiteHe(System.Int32,System.Double)"/>) are related to statisticians' Hermite
            polynomials via H<sub>n</sub>(x) = 2<sup>n</sup>H<sub>n</sub>(x √2).</para>
            </remarks>
            <seealso cref="M:Meta.Numerics.Functions.OrthogonalPolynomials.HermiteH(System.Int32,System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.OrthogonalPolynomials.LaguerreL(System.Int32,System.Double)">
            <summary>
            Computes the value of a Laguerre polynomial.
            </summary>
            <param name="n">The order, which must be non-negative.</param>
            <param name="x">The argument, which must be non-negative.</param>
            <returns>The value L<sub>n</sub>(x).</returns>
            <remarks>
            <para>Laguerre functions are orthogonal on the interval [0,+&#8734;) with the weight e<sup>-x</sup>.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Functions.OrthogonalPolynomials.LegendreP(System.Int32,System.Double)">
            <summary>
            Computes the value of a Legendre polynomial.
            </summary>
            <param name="l">The order, which must be non-negative.</param>
            <param name="x">The argument, which must lie on the closed interval between -1 and +1.</param>
            <returns>The value of P<sub>l</sub>(x).</returns>
            <remarks>
            <para>Legendre polynomials are orthogonal on the interval [-1,1].</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Functions.OrthogonalPolynomials.ChebyshevT(System.Int32,System.Double)">
            <summary>
            Computes the value of a Cebyshev polynomial.
            </summary>
            <param name="n">The order, which must be non-negative.</param>
            <param name="x">The argument, which must lie in the closed interval between -1 and +1.</param>
            <returns>The value of T<sub>n</sub>(x).</returns>
            <remarks>
            <para>Chebyshev polynomials are orthogonal on the interval [-1,1] with the weight (1-x<sup>2</sup>)<sup>1/2</sup>.</para>
            </remarks>
        </member>
        <member name="T:Meta.Numerics.Statistics.Distribution">
            <summary>
            Represents a probability distribution.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.Distribution.ProbabilityDensity(System.Double)">
            <summary>
            Returns the probability density at the given point.
            </summary>
            <param name="x">The reference point.</param>
            <returns>The probability density p(x1).</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.Distribution.LeftProbability(System.Double)">
            <summary>
            Returns the cumulative probability to the left of (below) the given point.
            </summary>
            <param name="x">The reference point.</param>
            <returns>The integrated probability P(x1) to obtain a result below the reference point.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.Distribution.RightProbability(System.Double)">
            <summary>
            Return the cumulative probability to the right of (above) the given point.
            </summary>
            <param name="x">The reference point.</param>
            <returns>The integrated probability 1-P(x1) to obtain a result above the reference point.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.Distribution.InverseLeftProbability(System.Double)">
            <summary>
            Returns the point at which the cumulative distribution function attains a given value. 
            </summary>
            <param name="P">The left cumulative probability P, which must lie between 0 and 1.</param>
            <returns>The point x1 at which the left cumulative probability attains the value P.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.Distribution.Moment(System.Int32)">
            <summary>
            Returns the given moment of the distribution.
            </summary>
            <param name="n">The order of the moment to determine.</param>
            <returns>The moment M<sub>n</sub> about the origin.</returns>
            <seealso cref="M:Meta.Numerics.Statistics.Distribution.MomentAboutMean(System.Int32)"/>
        </member>
        <member name="M:Meta.Numerics.Statistics.Distribution.MomentAboutMean(System.Int32)">
            <summary>
            Returns the given moment of the distribution, about the mean. 
            </summary>
            <param name="n">The order of the moment to determine.</param>
            <returns>The moment of order n about the mean.</returns>
            <seealso cref="M:Meta.Numerics.Statistics.Distribution.Moment(System.Int32)"/>
        </member>
        <member name="P:Meta.Numerics.Statistics.Distribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.Distribution.StandardDeviation">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.Distribution.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <remarks>The median is the point with equal integrated probability above and below, i.e. with P(x1) = 0.5.</remarks>
        </member>
        <member name="T:Meta.Numerics.Statistics.UniformDistribution">
            <summary>
            Represents a uniform distribution over an interval.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.UniformDistribution.#ctor(Meta.Numerics.Interval)">
            <summary>
            Initializes a new uniform distribution on the given interval.
            </summary>
            <param name="range">The range of the distribution.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.UniformDistribution.ProbabilityDensity(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.UniformDistribution.LeftProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.UniformDistribution.InverseLeftProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.UniformDistribution.Moment(System.Int32)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.UniformDistribution.MomentAboutMean(System.Int32)">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.UniformDistribution.Range">
            <summary>
            Gets the range of the uniform distribution.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.UniformDistribution.Mean">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.UniformDistribution.StandardDeviation">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.UniformDistribution.Median">
            <usebase/>
        </member>
        <member name="T:Meta.Numerics.Statistics.NormalDistribution">
            <summary>
            Represents a normal (Gaussian) distribution.
            </summary>
            <remarks>A normal distribution is a bell-shaped curve centered at its mean and falling off symmetrically on each side. It is
            a two-parameter distribution determined by giving its mean and standard deviation, i.e. its center and width. Its range is the
            entire real number line, but in the tails, i.e. far from the center, it falls off extremely rapidly.
            <para>A normal distribution with mean zero and standard deviation one is called a standard normal distribution.</para>
            <para>The normal distribution is sometimes called a Gaussian distribtuion, after the mathematician Friedrich Gauss.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Statistics.NormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new normal distribution with the given mean and standard deviation.
            </summary>
            <param name="mu">The mean.</param>
            <param name="sigma">The standard deviation, which must be positive.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.NormalDistribution.#ctor">
            <summary>
            Initializes a new standard normal distribution.
            </summary>
            <remarks>The standard normal distribution has mean zero and standard deviation one.</remarks>
        </member>
        <member name="M:Meta.Numerics.Statistics.NormalDistribution.ProbabilityDensity(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.NormalDistribution.LeftProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.NormalDistribution.RightProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.NormalDistribution.Moment(System.Int32)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.NormalDistribution.MomentAboutMean(System.Int32)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.NormalDistribution.InverseLeftProbability(System.Double)">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.NormalDistribution.Mean">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.NormalDistribution.StandardDeviation">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.NormalDistribution.Median">
            <usebase/>
        </member>
        <member name="T:Meta.Numerics.Statistics.ExponentialDistribution">
            <summary>
            Represents an exponential distribution.
            </summary>
            <remarks>An exponential distribution falls off exponentially in the range from zero to infinity. It is a one-parameter
            distribution, determined entirely by its rate of fall-off.</remarks>
        </member>
        <member name="M:Meta.Numerics.Statistics.ExponentialDistribution.#ctor(System.Double)">
            <summary>
            Initializes a new exponential distribution with the given mean.
            </summary>
            <param name="mu">The mean, which must be positive.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.ExponentialDistribution.ProbabilityDensity(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ExponentialDistribution.LeftProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ExponentialDistribution.RightProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ExponentialDistribution.InverseLeftProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ExponentialDistribution.Moment(System.Int32)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ExponentialDistribution.MomentAboutMean(System.Int32)">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.ExponentialDistribution.Mean">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.ExponentialDistribution.StandardDeviation">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.ExponentialDistribution.Median">
            <usebase />
        </member>
        <member name="T:Meta.Numerics.Statistics.ChiSquaredDistribution">
            <summary>
            Represents a χ<sup>2</sup> distribution.
            </summary>
            <remarks>A chi squared distribution is an asymmetrical distribution ranging from zero to infinity with a peak near its
            number of degrees of freedom ν (nu). It is a one-parameter distribution determined entirely by the parameter nu.
            <para>Technically, the χ<sup>2</sup> distribution is the distribution of a sum of the squares of ν independent
            standard-normally distributed variables. In practice it is most often encountered in data fitting or contingency testing.</para>
            </remarks>
            <seealso cref="M:Meta.Numerics.Statistics.ContingencyTable.PearsonChiSquaredTest"/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ChiSquaredDistribution.#ctor(System.Int32)">
            <summary>
            Initializes a new &#x3C7;<sup>2</sup> distribution.
            </summary>
            <param name="nu">The number of degrees of freedom, which must be positive.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.ChiSquaredDistribution.ProbabilityDensity(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ChiSquaredDistribution.LeftProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ChiSquaredDistribution.RightProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ChiSquaredDistribution.InverseLeftProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ChiSquaredDistribution.Moment(System.Int32)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.ChiSquaredDistribution.MomentAboutMean(System.Int32)">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.ChiSquaredDistribution.DegreesOfFreedom">
            <summary>
            Gets the number of degrees of freedom &#x3BD; of the distribution.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.ChiSquaredDistribution.Mean">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.ChiSquaredDistribution.StandardDeviation">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.ChiSquaredDistribution.Median">
            <usebase />
        </member>
        <member name="T:Meta.Numerics.Statistics.StudentDistribution">
            <summary>
            Represents the distribution of Student't t statistic.
            </summary>
            <remarks><para>The mean of n independent standard-normal distributed variables, divided by their root mean square,
            is distributed according a Student distribution with n degrees of freedom. Since this is the form of the expression
            for the mean of a sample divided by its standard deviation, the Student distribution expresses the distribution of
            sample means arround the population mean, for a normally distributed population.</para></remarks>
            <seealso cref="M:Meta.Numerics.Statistics.Sample.StudentTTest(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Statistics.StudentDistribution.#ctor(System.Double)">
            <summary>
            Initializes a new Student distribution.
            </summary>
            <param name="nu">The number of degrees of freedom, which must be positive.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.StudentDistribution.ProbabilityDensity(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.StudentDistribution.LeftProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.StudentDistribution.RightProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.StudentDistribution.Moment(System.Int32)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.StudentDistribution.MomentAboutMean(System.Int32)">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.StudentDistribution.DegreesOfFreedom">
            <summary>
            Gets the number of degrees of freedom.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.StudentDistribution.Mean">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.StudentDistribution.StandardDeviation">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.StudentDistribution.Median">
            <usebase/>
        </member>
        <member name="T:Meta.Numerics.Statistics.KolmogorovDistribution">
            <summary>
            Represents a Kolmogorov distribution.
            </summary>
            <remarks><para>The D statistic in a Kolmogorov-Smirnov test is distributed (under the null hypothesis) according to a Kolmogorov disribution.</para></remarks>
            <seealse cref="M:Meta.Numerics.Statistics.Sample.KolmogorovSmirnovTest(Meta.Numerics.Statistics.Distribution)"/>
        </member>
        <member name="M:Meta.Numerics.Statistics.KolmogorovDistribution.#ctor">
            <summary>
            Instantiates a new Kolmogorov distribution.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.KolmogorovDistribution.ProbabilityDensity(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.KolmogorovDistribution.LeftProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.KolmogorovDistribution.RightProbability(System.Double)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.KolmogorovDistribution.Moment(System.Int32)">
            <usebase/>
        </member>
        <member name="M:Meta.Numerics.Statistics.KolmogorovDistribution.MomentAboutMean(System.Int32)">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.KolmogorovDistribution.Mean">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.KolmogorovDistribution.StandardDeviation">
            <usebase/>
        </member>
        <member name="P:Meta.Numerics.Statistics.KolmogorovDistribution.Median">
            <usebase />
        </member>
        <member name="T:Meta.Numerics.Functions.AdvancedComplexMath">
            <summary>
            Contains methods that compute advanced functions of complex arguments.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedComplexMath.Faddeeva(Meta.Numerics.Complex)">
            <summary>
            Computes the complex Faddeeva function.
            </summary>
            <param name="z">The complex argument.</param>
            <returns>The complex value of w(z).</returns>
            <remarks>
            <para>The Faddeeva function w(z) is related to the error function of a complex argument w(z) = e<sup>-z<sup>2</sup></sup> erfc(-I z).</para>
            <para>It has the integral representation w(z) = (I/π) <sub>-∞</sub>∫<sup>∞</sup>dt e<sup>-t<sup>2</sup></sup>/(z-t).</para>
            <para>For purely imaginary values, it can be reduced to the error function. For purely real values, it can be reduced to Dawson's integral.</para>
            <para>It appears in the computation of the Voigt line profile function V(x;σ,γ).</para>
            </remarks>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.Erf(System.Double)"/>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.Erfc(System.Double)"/>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedMath.Dawson(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedComplexMath.Gamma(Meta.Numerics.Complex)">
            <summary>
            Computes the complex Gamma function.
            </summary>
            <param name="z">The complex argument.</param>
            <returns>The complex value &#x393;(z).</returns>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedComplexMath.LogGamma(Meta.Numerics.Complex)">
            <summary>
            Compute the complex log Gamma function.
            </summary>
            <param name="z">The complex argument.</param>
            <returns>The complex value ln(Γ(z)).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The real part of <paramref name="z"/> is negative.</exception>
        </member>
        <member name="T:Meta.Numerics.Statistics.DataPoint">
            <summary>
            Represents an experimental data point. 
            </summary>
            <remarks><para></para></remarks>
            <seealso cref="T:Meta.Numerics.Statistics.DataSet"/>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataPoint.#ctor(System.Double,Meta.Numerics.Statistics.UncertainValue)">
            <summary>
            Initializes a new data point with the given values for the ordinate and uncertain abcissa.
            </summary>
            <param name="x">The ordinate.</param>
            <param name="y">The abcissa.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new data point with the given values for the ordinate, abcissa, and uncertainty.
            </summary>
            <param name="x">The ordinate.</param>
            <param name="y">The best estimate of the abcissa.</param>
            <param name="dy">The uncertainty in the abcissa.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataPoint.op_Equality(Meta.Numerics.Statistics.DataPoint,Meta.Numerics.Statistics.DataPoint)">
            <summary>
            Determines whether two data points are equal.
            </summary>
            <param name="d1">The first data point.</param>
            <param name="d2">The second data point.</param>
            <returns>True if the data points are equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataPoint.op_Inequality(Meta.Numerics.Statistics.DataPoint,Meta.Numerics.Statistics.DataPoint)">
            <summary>
            Determines whether two data points are not equal.
            </summary>
            <param name="d1">The first data point.</param>
            <param name="d2">The second data point.</param>
            <returns>True if the data points are not equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataPoint.Equals(System.Object)">
            <summary>
            Determines whether the object represents the same data point.
            </summary>
            <param name="obj">The object.</param>
            <returns>True if the object represents the same data point, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataPoint.GetHashCode">
            <summary>
            Gets a hash code for the data point.
            </summary>
            <returns>A hash code for the data point.</returns>
        </member>
        <member name="P:Meta.Numerics.Statistics.DataPoint.X">
            <summary>
            Gets or sets the value of the ordinate (independent variable).
            </summary>
        </member>
        <member name="P:Meta.Numerics.Statistics.DataPoint.Y">
            <summary>
            Gets or sets the uncertain value of the abcissa (the depdent variable).
            </summary>
        </member>
        <member name="T:Meta.Numerics.Statistics.DataSet">
            <summary>
            Represents a set of <see cref="T:Meta.Numerics.Statistics.DataPoint"/> measurements.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.#ctor">
            <summary>
            Initializes a new, empty data set.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.#ctor(System.Collections.Generic.IEnumerable{Meta.Numerics.Statistics.DataPoint})">
            <summary>
            Initializes a new data set with the specified data.
            </summary>
            <param name="data">An enumerator over the <see cref="T:Meta.Numerics.Statistics.DataPoint"/>s to place in the set.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.Add(Meta.Numerics.Statistics.DataPoint)">
            <summary>
            Adds a new data point to the set.
            </summary>
            <param name="datum">The data point.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.Add(System.Collections.Generic.IEnumerable{Meta.Numerics.Statistics.DataPoint})">
            <summary>
            Adds a series of data points to the set.
            </summary>
            <param name="data">The data points.</param>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.Remove(Meta.Numerics.Statistics.DataPoint)">
            <summary>
            Removes a data point from the set.
            </summary>
            <param name="datum">The data point to remove.</param>
            <returns>True if the data point was found and removed; otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.Contains(Meta.Numerics.Statistics.DataPoint)">
            <summary>
            Determines whether the set contains the given data point.
            </summary>
            <param name="datum">The data point.</param>
            <returns>True if the set contains the given data point, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.Clear">
            <summary>
            Removes all data points from the set.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.FitToLinearFunction(Meta.Numerics.Function{System.Double,System.Double}[])">
            <summary>
            Fits the data to a linear combination of fit functions.
            </summary>
            <param name="functions">The component functions.</param>
            <returns>A fit result containing the best-fit coefficients of the component functions and a χ<sup>2</sup> test
            of the quality of the fit.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> is null.</exception>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.FitToConstant">
            <summary>
            Fits the data to a constant value.
            </summary>
            <returns>A fit result containing the best combined value and a &#x3C7;<sup>2</sup> test of the quality of the fit.</returns>
            <remarks><para>This method provides a simple way to </para></remarks>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.FitToProportionality">
            <summary>
            Fit the data to a proportionality relationship.
            </summary>
            <returns>A fit result containing the best-fit proportionality constant parameter and a &#x3C7;<sup>2</sup> test of the
            quality of the fit.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.FitToLine">
            <summary>
            Fits the data to a line.
            </summary>
            <returns>A fit result containing the best-fit intercept and slope parameters and a &#x3C7;<sup>2</sup> test of
            the quality of the fit.</returns>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.FitToPolynomial(System.Int32)">
            <summary>
            Fits the data to a polynomial.
            </summary>
            <param name="order">The order of the polynomial to fit.</param>
            <returns>A fit result containg the best-fit polynomial coefficients, in order of ascending power from 0 to <paramref name="order"/>,
            and a χ<sup>2</sup> test of the quality of the fit.</returns>
            <exception cref="T:System.InvalidOperationException">There are more polynomial coefficients than data points.</exception>
        </member>
        <member name="M:Meta.Numerics.Statistics.DataSet.FitToFunction(Meta.Numerics.Function{System.Double[],System.Double,System.Double},System.Double[])">
            <summary>
            Fits the data to an arbitrary parameterized function.
            </summary>
            <param name="function">The fit function.</param>
            <param name="start">An initial guess at the parameters.</param>
            <returns>A fit result containing the best-fitting function parameters
            and a χ<sup>2</sup> test of the quality of the fit.</returns>
            <exception cref="T:System.InvalidOperationException">There are more fit function parameters than data points.</exception>
        </member>
        <member name="P:Meta.Numerics.Statistics.DataSet.Count">
            <summary>
            Gets the size of the data set.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Matrices.Vector`1">
            <summary>
            Represents a vector of numbers.
            </summary>
            <typeparam name="T">The type of numbers the vector contins.</typeparam>
            <remarks><para>For matrix operations, you will usually want to define a ColumnVector or RowVector instead.</para></remarks>
            <seealso cref="T:Meta.Numerics.Matrices.ColumnVector"/>
            <seealso cref="T:Meta.Numerics.Matrices.RowVector"/>
        </member>
        <member name="M:Meta.Numerics.Matrices.Vector`1.#ctor(System.Int32)">
            <summary>
            Instantiates a new vector of the given dimension.
            </summary>
            <param name="dimension">The dimension of the vector.</param>
        </member>
        <member name="M:Meta.Numerics.Matrices.Vector`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Instantiates a new vector containing the given elements.
            </summary>
            <param name="list">The component elements.</param>
        </member>
        <member name="M:Meta.Numerics.Matrices.Vector`1.ToArray">
            <summary>
            Converts the vector to an array.
            </summary>
            <returns>An array of the vector components.</returns>
        </member>
        <member name="P:Meta.Numerics.Matrices.Vector`1.Item(System.Int32)">
            <summary>
            Gets or sets the <paramref name="n"/>th vector component.
            </summary>
            <param name="index">The (zero-based) component index.</param>
            <returns>The <paramref name="n"/>th vector component.</returns>
        </member>
        <member name="P:Meta.Numerics.Matrices.Vector`1.Dimension">
            <summary>
            Gets the dimension of the vector.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Matrices.ColumnVector">
            <summary>
            Represents a column vector of real numbers.
            </summary>
            <remarks><para>An N-dimensional column vector is an NX1-dimensional matrix.</para></remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.#ctor(System.Int32)">
            <summary>
            Initializes a column vector of a given dimension.
            </summary>
            <param name="dimension">The dimension of the vector.</param>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a column vector with the components given by a list.
            </summary>
            <param name="list">A list of the initial components.</param>
            <remarks>
            <para>Many ordered collections of reals, including double[] and List&lt;double&gt;, implement
            IList&lt;double&gt; and thus can be used with this constructor.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.Transpose">
            <summary>
            Returns the transpose of the column vector.
            </summary>
            <returns>An independent row vector with the same components as the column vector.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.Clone">
            <summary>
            Returns a clone of the column vector.
            </summary>
            <returns>An independent column vector with the same components as the original.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.op_Equality(Meta.Numerics.Matrices.ColumnVector,Meta.Numerics.Matrices.ColumnVector)">
            <summary>
            Determines whether two column vectors are equal.
            </summary>
            <param name="v1">The first column vector.</param>
            <param name="v2">The second column vector.</param>
            <returns>True if <paramref name="v1"/> and <paramref name="v2"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.op_Inequality(Meta.Numerics.Matrices.ColumnVector,Meta.Numerics.Matrices.ColumnVector)">
            <summary>
            Determines whether two column vectors are not equal.
            </summary>
            <param name="v1">The first column vector.</param>
            <param name="v2">The second column vector.</param>
            <returns>False if <paramref name="v1"/> and <paramref name="v2"/> are equal, otherwise true.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.Equals(System.Object)">
            <summary>
            Determine whether the supplied object is an equal column vector.
            </summary>
            <param name="obj">An object.</param>
            <returns>True if <paramref name="obj"/> is an equal column vector, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.GetHashCode">
            <usebase />
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.op_Addition(Meta.Numerics.Matrices.ColumnVector,Meta.Numerics.Matrices.ColumnVector)">
            <summary>
            Computes the sum of two column vectors.
            </summary>
            <param name="v1">The first column vector.</param>
            <param name="v2">The second column vector.</param>
            <returns>The sum of <paramref name="v1"/> and <paramref name="v2"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.op_Subtraction(Meta.Numerics.Matrices.ColumnVector,Meta.Numerics.Matrices.ColumnVector)">
            <summary>
            Computes the difference of two column vectors.
            </summary>
            <param name="v1">The first column vector.</param>
            <param name="v2">The second column vector.</param>
            <returns>The difference of <paramref name="v1"/> and <paramref name="v2"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.op_Multiply(System.Double,Meta.Numerics.Matrices.ColumnVector)">
            <summary>
            Computes the product of a real number and a column vector.
            </summary>
            <param name="a">The real number.</param>
            <param name="v">The column vector.</param>
            <returns>The product of <paramref name="a"/> and <paramref name="v"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.op_UnaryNegation(Meta.Numerics.Matrices.ColumnVector)">
            <summary>
            Computes the additive inverse of a column vector.
            </summary>
            <param name="v">The column vector.</param>
            <returns>The additive inverse of the column vector.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.op_Multiply(Meta.Numerics.Matrices.RowVector,Meta.Numerics.Matrices.ColumnVector)">
            <summary>
            Computes the inner product of a row and a column vector.
            </summary>
            <param name="v1">The row vector.</param>
            <param name="v2">The column vector.</param>
            <returns>The (dot) inner product v1 * v2.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.ColumnVector.op_Multiply(Meta.Numerics.Matrices.IMatrix,Meta.Numerics.Matrices.ColumnVector)">
            <summary>
            Computes the product of a matrix and a column vector.
            </summary>
            <param name="M">The matrix.</param>
            <param name="v">The column vector.</param>
            <returns>The product Mv.</returns>
        </member>
        <member name="T:Meta.Numerics.Matrices.RowVector">
            <summary>
            Represents a row vector of real numbers.
            </summary>
            <remarks><para>An N-dimensional row vector is a 1XN-dimensional matrix.</para></remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.#ctor(System.Int32)">
            <summary>
            Initializes a row vector of a given dimension.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a row vector with the components given by a list.
            </summary>
            <param name="list">A list of the initial components.</param>
            <remarks>
            <para>Many ordered collections of reals, including double[] and List&lt;double&gt;, implement
            IList&lt;double&gt; and thus can be used with this constructor.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.Transpose">
            <summary>
            Returns the transpose of the column vector.
            </summary>
            <returns>An independent column vector with the same components as the row vector.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.Clone">
            <summary>
            Returns a clone of the row vector.
            </summary>
            <returns>An independent row vector with the same components as the original.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.op_Equality(Meta.Numerics.Matrices.RowVector,Meta.Numerics.Matrices.RowVector)">
            <summary>
            Determines whether two row vectors are equal.
            </summary>
            <param name="v1">The first row vector.</param>
            <param name="v2">The second row vector.</param>
            <returns>True if <paramref name="v1"/> and <paramref name="v2"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.op_Inequality(Meta.Numerics.Matrices.RowVector,Meta.Numerics.Matrices.RowVector)">
            <summary>
            Determines whether two row vectors are not equal.
            </summary>
            <param name="v1">The first row vector.</param>
            <param name="v2">The second row vector.</param>
            <returns>False if <paramref name="v1"/> and <paramref name="v2"/> are equal, otherwise true.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.Equals(System.Object)">
            <summary>
            Determine whether the supplied object is an equal row vector.
            </summary>
            <param name="obj">An object.</param>
            <returns>True if <paramref name="obj"/> is an equal row vector, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.GetHashCode">
            <usebase />
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.op_Addition(Meta.Numerics.Matrices.RowVector,Meta.Numerics.Matrices.RowVector)">
            <summary>
            Computes the sum of two row vectors.
            </summary>
            <param name="v1">The first row vector.</param>
            <param name="v2">The second row vector.</param>
            <returns>The sum of <paramref name="v1"/> and <paramref name="v2"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.op_Subtraction(Meta.Numerics.Matrices.RowVector,Meta.Numerics.Matrices.RowVector)">
            <summary>
            Computes the difference of two row vectors.
            </summary>
            <param name="v1">The first row vector.</param>
            <param name="v2">The second row vector.</param>
            <returns>The difference of <paramref name="v1"/> and <paramref name="v2"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.op_Multiply(System.Double,Meta.Numerics.Matrices.RowVector)">
            <summary>
            Computes the product of a real number and a row vector.
            </summary>
            <param name="a">The real number.</param>
            <param name="v">The row vector.</param>
            <returns>The product of <paramref name="a"/> and <paramref name="v"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.op_Multiply(Meta.Numerics.Matrices.ColumnVector,Meta.Numerics.Matrices.RowVector)">
            <summary>
            Computes the outer product of a column vector and a row vector.
            </summary>
            <param name="v">The column vector.</param>
            <param name="u">The row vector.</param>
            <returns>The outer product <paramref name="v"/> * <paramref name="u"/>.</returns>
            <remarks>
            <para>The outer product of vectors is a matrix with elements M<sub>i,j</sub> = v<sub>i</sub>u<sub>j</sub>.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.RowVector.op_Multiply(Meta.Numerics.Matrices.RowVector,Meta.Numerics.Matrices.IMatrix)">
            <summary>
            Computes the product of a row vector and a matrix.
            </summary>
            <param name="v">The row vector.</param>
            <param name="M">The matrix.</param>
            <returns>The product vM.</returns>
        </member>
        <member name="T:Meta.Numerics.Matrices.SymmetricMatrix">
            <summary>
            Represents a symmetric matrix.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.#ctor(System.Int32)">
            <summary>
            Instantiates a new symmetric matrix.
            </summary>
            <param name="dimension">The dimension of the matrix, which must be positive.</param>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.Clone">
            <summary>
            Returns an independent copy of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.Trace">
            <summary>
            Computes the trace of the matrix.
            </summary>
            <returns>The trace of the matrix tr(M).</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.CholeskyDecomposition">
            <summary>
            Returns the Cholesky decomposition of the matrix.
            </summary>
            <returns>The Cholesky decomposition of the matrix, or null is the matrix is not positive definite.</returns>
            <remarks>
            <para>A Cholesky decomposition is a special decomposition that is possible only for positive definite matrices.
            (A positive definite matrix has x<sup>T</sup>Mx > 0 for any vector x. Equivilently, M is positive definite if
            all its eigenvalues are positive.)</para>
            <para>THe Cholesky decomposition represents M = C C<sup>T</sup>, where C is lower-left triangular (and thus C<sup>T</sup>
            is upper-right triangular. It is basically an LU decomposition where the L and U factors are related by transposition.
            Since the M is produced by multiplying C "by itself", the matrix C is sometimes call the "square root" of M.</para>
            <para>Cholesky decomposition is an O(N<sup>3</sup>) operation. It is about a factor of two faster than LU decomposition,
            so it is a faster way to obtain inverses, determinates, etc. if you know that M is positive definite.</para>
            <para>The fastest way to test whether your matrix is positive definite is attempt a Cholesky decomposition. If this
            method returns null, M is not positive definite.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.Eigensystem">
            <summary>
            Computes the eigenvalues and eigenvectors of the matrix.
            </summary>
            <returns>A representation of the eigenvalues and eigenvectors of the matrix.</returns>
            <remarks>
            <para>For a generic vector v and matrix M, Mv = u will point in some direction with no particular relationship to v.
            The eigenvectors of a matrix M are vectors z that satisfy Mz = &#x3BB;z, i.e. multiplying an eigenvector by a
            matrix reproduces the same vector, up to a prortionality constant &#x3BB; called the eigenvalue.</para>
            <para>For v to be an eigenvector of M with eigenvalue &#x3BB;, (M - &#x3BB;I)z = 0. But for a matrix to
            anihilate any non-zero vector, that matrix must have determinant, so det(M - &#x3BB;I)=0. For a matrix of
            order N, this is an equation for the roots of a polynomial of order N. Since an order-N polynomial always has exactly
            N roots, an order-N matrix always has exactly N eigenvalues.</para>
            <para>An alternative way of expressing the same relationship is to say that the eigenvalues of a matrix are its
            diagonal elements when the matrix is expressed in a basis that diagonalizes it. That is, given Z such that Z<sup>-1</sup>MZ = D,
            where D is diagonal, the columns of Z are the eigenvectors of M and the diagonal elements of D are the eigenvalues.</para>
            <para>Note that the eigenvectors of a matrix are not entirely unique. Given an eigenvector z, any scaled vector &#x3B1;z
            is an eigenvector with the same eigenvalue, so eigenvectors are at most unique up to a rescaling. If an eigenvalue
            is degenerate, i.e. there are two or more linearly independent eigenvectors with the same eigenvalue, then any linear
            combination of the eigenvectors is also an eigenvector with that eigenvalue, and in fact any set of vectors that span the
            same subspace could be taken as the eigenvector set corresponding to that eigenvalue.</para>
            <para>The eigenvectors of a symmetric matrix are always orthogonal and the eigenvalues are always real. The transformation
            matrix Z is thus orthogonal (Z<sup>-1</sup> = Z<sup>T</sup>).</para>
            <para>Finding the eigenvalues and eigenvectors of a symmetric matrix is an O(N<sup>3</sup>) operation.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.Eigenvalues">
            <summary>
            Computes the eigenvalues of the matrix. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.op_Equality(Meta.Numerics.Matrices.SymmetricMatrix,Meta.Numerics.Matrices.SymmetricMatrix)">
            <summary>
            Determines whether two symmetric matrices are equal.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>True if <paramref name="M1"/> and <paramref name="M2"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.op_Inequality(Meta.Numerics.Matrices.SymmetricMatrix,Meta.Numerics.Matrices.SymmetricMatrix)">
            <summary>
            Determines whether two symmetric matrices are not equal.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>False if <paramref name="M1"/> and <paramref name="M2"/> are equal, otherwise true.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.Equals(System.Object)">
            <summary>
            Determines whether the given object is an equal matrix.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if <paramref name="obj"/> is an equal matrix, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.op_Addition(Meta.Numerics.Matrices.SymmetricMatrix,Meta.Numerics.Matrices.SymmetricMatrix)">
            <summary>
            Adds two symmetric matrices.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>The sum <paramref name="M1"/> + <paramref name="M2"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.op_Subtraction(Meta.Numerics.Matrices.SymmetricMatrix,Meta.Numerics.Matrices.SymmetricMatrix)">
            <summary>
            Subtracts two symmetric matrices.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>The difference <paramref name="M1"/> - <paramref name="M2"/>.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.op_Multiply(Meta.Numerics.Matrices.SymmetricMatrix,Meta.Numerics.Matrices.SymmetricMatrix)">
            <summary>
            Multiplies two symmetric matrices.
            </summary>
            <param name="M1">The first matrix.</param>
            <param name="M2">The second matrix.</param>
            <returns>The matrix product <paramref name="M1"/> <paramref name="M2"/>.</returns>
            <remarks><para>Note that the product of two symmetric matrix is, in general, not itself symmetric.</para></remarks>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.op_Multiply(System.Double,Meta.Numerics.Matrices.SymmetricMatrix)">
            <summary>
            Multiplies a symmetric matrix by a real factor.
            </summary>
            <param name="f">The factor.</param>
            <param name="M">The matrix.</param>
            <returns>The product of the matrix and the factor.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.SymmetricMatrix.op_Division(Meta.Numerics.Matrices.SymmetricMatrix,System.Double)">
            <summary>
            Computes the the quotient of a symmetric matrix and a real number.
            </summary>
            <param name="M">The matrix.</param>
            <param name="x">The real number.</param>
            <returns>The quotient <paramref name="M"/>/<paramref name="x"/>.</returns>
        </member>
        <member name="P:Meta.Numerics.Matrices.SymmetricMatrix.Dimension">
            <summary>
            Gets the dimension of the matrix.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Matrices.SymmetricMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an element of the matrix.
            </summary>
            <param name="r">The (zero-based) row number.</param>
            <param name="c">The (zero-based) column number.</param>
            <returns>The value of the specified matrix entry M<sub>r c</sub>.</returns>
            <remarks>
            <para>The set operation preserves the symmetry of the matrix; when entry M<sub>r c</sub> is changed, entry
            M<sub>c r</sub> is updated automatically.</para>
            </remarks>
        </member>
        <member name="T:Meta.Numerics.Matrices.RealEigensystem">
            <summary>
            Represents a collection of real eigenvalues and eigenvectors.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Matrices.RealEigensystem.Eigenvalue(System.Int32)">
            <summary>
            Gets a specified eigenvalue.
            </summary>
            <param name="n">The (zero-based) index of the eigenvalue.</param>
            <returns>The <paramref name="n"/>th eigenvalue.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.RealEigensystem.Eigenvector(System.Int32)">
            <summary>
            Gets a specified eigenvector.
            </summary>
            <param name="n">The (zero-based) index of the eigenvector.</param>
            <returns>The <paramref name="n"/>th eigenvector.</returns>
        </member>
        <member name="P:Meta.Numerics.Matrices.RealEigensystem.Dimension">
            <summary>
            Gets the dimension of the eigensystem.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Matrices.CholeskyDecomposition">
            <summary>
            Represents the Cholesky Decomposition of a symmetric, positive definite matrix. 
            </summary>
            <seealso cref="M:Meta.Numerics.Matrices.SymmetricMatrix.CholeskyDecomposition"/>
        </member>
        <member name="M:Meta.Numerics.Matrices.CholeskyDecomposition.Solve(System.Collections.Generic.IList{System.Double})">
            <summary>
            Computes the solution vector that, when multiplied by the original matrix, produces the given left-hand side vector.
            </summary>
            <param name="rhs">The right-hand-side vector.</param>
            <returns>The left-hand-side (solution) vector.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.CholeskyDecomposition.Inverse">
            <summary>
            Computes the inverse of the original matrix.
            </summary>
            <returns>The inverse of the original matrix.</returns>
        </member>
        <member name="M:Meta.Numerics.Matrices.CholeskyDecomposition.Determinant">
            <summary>
            Gets the determinant of the original matrix.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Matrices.CholeskyDecomposition.Dimension">
            <summary>
            Gets the dimension of the system.
            </summary>
        </member>
        <member name="T:Meta.Numerics.Functions.AdvancedIntegerMath">
            <summary>
            Contains methods that compute advanced functions of integer arguments.
            </summary>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedIntegerMath.Factorial(System.Int32)">
            <summary>
            Computes the factorial of an integer.
            </summary>
            <param name="n">The argument, which must be non-negative.</param>
            <returns>The factorial <paramref name="n"/>!.</returns>
            <remarks>
            <para>The factorial of an integer n is the product of all integers from 1 to n.</para>
            <para>Because n! becomes too large to be representable as a double-precision floating point number for quite
            moderate values of n, you may find it convenient to use the <see cref="M:Meta.Numerics.Functions.AdvancedIntegerMath.LogFactorial(System.Int32)"/> in order to avoid
            overflow when computing expression in which large factorials will cancel with other large factors.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> is negative.</exception>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedIntegerMath.LogFactorial(System.Int32)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedIntegerMath.LogFactorial(System.Int32)">
            <summary>
            Computes the logrithm of the factorial of an integer.
            </summary>
            <param name="n">The argument, which must be non-negative.</param>
            <returns>The log factorial ln(<paramref name="n"/>!).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> is negative.</exception>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedIntegerMath.Factorial(System.Int32)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedIntegerMath.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Computes binomial coefficients.
            </summary>
            <param name="n">The upper argument, which must be non-negative. (The order of the polynomial.)</param>
            <param name="m">The lower argument, which must be non-negative and less than or equal to <paramref name="n"/>. (The order of the term.)</param>
            <returns>The binomial coefficent C(<paramref name="n"/>,<paramref name="m"/>),
            also denoted "<paramref name="n"/> choose <paramref name="m"/>".</returns>
            <remarks>
            <para>The binomial coefficient C(n,m) is the coefficient of x<sup><paramref name="m"/></sup> in the expansion
            of (1+x)<sup><paramref name="n"/></sup>.</para>
            <para>C(n,m) can also be given a combinatoric intrepretation as the total number of distinct subsets of m items in a set of n items.</para>
            <para>Pascal's triangle is a classic representation of binomial coefficients.</para>
            <table style="text-align: center;">
            <tr><td colspan="3"></td><td colspan="2">C(0,0)</td></tr>
            <tr><td colspan="2"></td><td colspan="2">C(1,0)</td><td colspan="2">C(1,1)</td></tr>
            <tr><td colspan="1"></td><td colspan="2">C(2,0)</td><td colspan="2">C(2,1)</td><td colspan="2">C(2,2)</td></tr>
            <tr><td colspan="2">C(3,0)</td><td colspan="2">C(3,1)</td><td colspan="2">C(3,2)</td><td colspan="2">C(3,3)</td></tr>
            </table>
            <para>The relation of an element in Pascal's triangle to its two parent elements is C(n+1,m) = C(n,m-1) + C(n,m).
            There are many other relationships among binomial coefficients. Among the most computationally useful is
            B(n,m+1) = (n-m)/(m+1) B(n,m), which can be used to generate all the binomial coefficients in a row of Pascal's
            triangle (i.e., all the coefficients for a given order polynomial) starting from an outer values B(n,0) = 1 =B(n,n).
            If you need a series of binomial coefficients, using a recurrion will be more computationally efficient than
            calling this method for each one.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> is negative, or <paramref name="m"/> lies outside [0,<paramref name="n"/>].</exception>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedIntegerMath.GCF(System.Int64,System.Int64)">
            <summary>
            Computes the greatest common factor of two integers.
            </summary>
            <param name="u">The first integer.</param>
            <param name="v">The second integer.</param>
            <returns>The greatest common factor of <paramref name="u"/> and <paramref name="v"/>.</returns>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedIntegerMath.LCM(System.Int64,System.Int64)"/>
        </member>
        <member name="M:Meta.Numerics.Functions.AdvancedIntegerMath.LCM(System.Int64,System.Int64)">
            <summary>
            Computes the least common multiple of two integers.
            </summary>
            <param name="u">The first integer.</param>
            <param name="v">The second integer.</param>
            <returns>The least common multiple of <paramref name="u"/> and <paramref name="v"/>.</returns>
            <seealso cref="M:Meta.Numerics.Functions.AdvancedIntegerMath.GCF(System.Int64,System.Int64)"/>
        </member>
        <member name="T:Meta.Numerics.Complex">
            <summary>Represents a complex number.</summary>
        </member>
        <member name="M:Meta.Numerics.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new complex number.
            </summary>
            <param name="re">The real part of the complex number.</param>
            <param name="im">The imaginary part of the complex number.</param>
        </member>
        <member name="M:Meta.Numerics.Complex.op_Explicit(Meta.Numerics.Complex)~System.Double">
            <summary>
            Converts the complex number to a double-precision real number.
            </summary>
            <param name="z">The complex number to covert.</param>
            <returns>The corresponding double-precision real number.</returns>
            <remarks><para>This explicit cast will fail if the complex number has a non-zero imaginary part.
            If you just want to obtain the real part of a complex number, use the <see cref="P:Meta.Numerics.Complex.Re"/> property.</para></remarks>
            <exception cref="T:System.InvalidCastException">z.Im ≠ 0</exception>
        </member>
        <member name="M:Meta.Numerics.Complex.op_Implicit(System.Double)~Meta.Numerics.Complex">
            <summary>
            Converts a double-precision real number to a complex number.
            </summary>
            <param name="x">The double-precision real number to convert.</param>
            <returns>The corresponding complex number.</returns>
            <remarks><para>The complex number output has a zero imaginary part and real part equal to the input number.</para>
            <para>This is an implicit cast; the compiler will apply it automatically whenever a real number is given in a situation
            where a complex number is required.</para></remarks>
        </member>
        <member name="M:Meta.Numerics.Complex.ToString">
            <summary>
            Produces a string representation of the complex number.
            </summary>
            <returns>A string represenation of the complex number.</returns>
        </member>
        <member name="M:Meta.Numerics.Complex.op_UnaryNegation(Meta.Numerics.Complex)">
            <summary>
            Negates a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The argument times -1.</returns>
        </member>
        <member name="M:Meta.Numerics.Complex.op_Equality(Meta.Numerics.Complex,Meta.Numerics.Complex)">
            <summary>
            Tests the equality of two complex numbers.
            </summary>
            <param name="z1">The first complex number.</param>
            <param name="z2">The second complex number.</param>
            <returns>True if the two complex numbers are equal, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Complex.op_Inequality(Meta.Numerics.Complex,Meta.Numerics.Complex)">
            <summary>
            Tests the inequality of two complex numbers.
            </summary>
            <param name="z1">The first complex number.</param>
            <param name="z2">The second complex number.</param>
            <returns>False if the two complex numbers are equal, otherwise true.</returns>
        </member>
        <member name="M:Meta.Numerics.Complex.Equals(System.Object)">
            <summary>
            Determines whether the given object represents the same complex number.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the object represents the same complex number, otherwise false.</returns>
        </member>
        <member name="M:Meta.Numerics.Complex.GetHashCode">
            <summary>
            Returns a hash code for the complex number.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Meta.Numerics.Complex.op_Addition(Meta.Numerics.Complex,Meta.Numerics.Complex)">
            <summary>
            Adds two complex numbers.
            </summary>
            <param name="z1">The first complex number.</param>
            <param name="z2">The second complex number.</param>
            <returns>The sum of the complex numbers.</returns>
        </member>
        <member name="M:Meta.Numerics.Complex.op_Subtraction(Meta.Numerics.Complex,Meta.Numerics.Complex)">
            <summary>
            Subtracts the second complex number from the first.
            </summary>
            <param name="z1">The first complex number.</param>
            <param name="z2">The second complex number.</param>
            <returns>The difference of the complex numbers.</returns>
        </member>
        <member name="M:Meta.Numerics.Complex.op_Multiply(Meta.Numerics.Complex,Meta.Numerics.Complex)">
            <summary>
            Multiplies two complex numbers.
            </summary>
            <param name="z1">The first complex number.</param>
            <param name="z2">The second complex number.</param>
            <returns>The product of the two complex numbers.</returns>
        </member>
        <member name="M:Meta.Numerics.Complex.op_Division(Meta.Numerics.Complex,Meta.Numerics.Complex)">
            <summary>
            Divides two complex numbers.
            </summary>
            <param name="z1">The first complex number.</param>
            <param name="z2">The second complex number.</param>
            <returns>The quotient of the two complex numbers.</returns>
        </member>
        <member name="P:Meta.Numerics.Complex.Re">
            <summary>
            Gets the real part of the complex number.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Complex.Im">
            <summary>
            Gets the imaginary part of the complex number.
            </summary>
        </member>
        <member name="P:Meta.Numerics.Complex.Conjugate">
            <summary>
            Gets the complex conjugate of the complex number.
            </summary>
        </member>
        <member name="T:Meta.Numerics.ComplexMath">
            <summary>
            Provides simple functions of complex arguments. 
            </summary>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Abs(Meta.Numerics.Complex)">
            <summary>
            Computes the absolute value of a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The value of |z|.</returns>
            <remarks>
            <para>The absolute value of a complex number is the distance of the number from the origin
            in the complex plane. This is a compatible generalization of the definition of the absolute
            value of a real number.</para>
            </remarks>
            <seealso cref="M:System.Math.Abs(System.Double)"/>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Arg(Meta.Numerics.Complex)">
            <summary>
            Computes the phase of a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The value of arg(z).</returns>
            <remarks>
            <para>The phase of a complex number is the angle between the line joining it to the origin and the real axis of the complex plane.</para>
            <para>The phase of complex numbers in the upper complex plane lies between 0 and &#x3C0;. The phase of complex numbers
            in the lower complex plane lies between 0 and -&#x3C0;. The phase of a real number is zero.</para>
            </remarks>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Exp(Meta.Numerics.Complex)">
            <summary>
            Computes e raised to the power of a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The value of e<sup>z</sup>.</returns>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Log(Meta.Numerics.Complex)">
            <summary>
            Computes the natrual logarithm of a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The value of ln(z).</returns>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Sqrt(Meta.Numerics.Complex)">
            <summary>
            Computes the square root of a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The square root of the argument.</returns>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Sin(Meta.Numerics.Complex)">
            <summary>
            Computes the sine of a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The value of sin(z).</returns>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Sinh(Meta.Numerics.Complex)">
            <summary>
            Computes the hyperbolic sine of a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The value of sinh(z).</returns>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Cos(Meta.Numerics.Complex)">
            <summary>
            Computes the cosine of a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The value of cos(z).</returns>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Cosh(Meta.Numerics.Complex)">
            <summary>
            Computes the hyperbolic cosine of a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The value of cosh(z).</returns>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Tan(Meta.Numerics.Complex)">
            <summary>
            Computes the tangent of a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The value of tan(z).</returns>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Tanh(Meta.Numerics.Complex)">
            <summary>
            Computes the hyperbolic tangent of a complex number.
            </summary>
            <param name="z">The argument.</param>
            <returns>The value of tanh(z).</returns>
        </member>
        <member name="M:Meta.Numerics.ComplexMath.Pow(Meta.Numerics.Complex,System.Double)">
            <summary>
            Raises a complex number to an arbitrary real power.
            </summary>
            <param name="z">The argument.</param>
            <param name="p">The power.</param>
            <returns>The value of z<sup>p</sup>.</returns>
        </member>
        <member name="P:Meta.Numerics.ComplexMath.I">
            <summary>
            Gets the unit imaginary number I.
            </summary>
        </member>
    </members>
</doc>
